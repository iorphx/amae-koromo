{"version":3,"sources":["components/modeModel/model.tsx","components/routing/index.tsx","components/modeModel/modelModeSelector.tsx","components/contestTools/minMax.tsx","components/contestTools/index.tsx"],"names":["DEFAULT_MODEL","selectedModes","ModelContext","React","createContext","useModel","useContext","ModelModeProvider","children","useReducer","oldModel","newProps","model","updateModel","value","useMemo","Provider","RouteDef","Error","ViewRoutes","Context","NavButtons","className","replace","keepState","withQueryString","t","useTranslation","routes","urlBase","useRouteMatch","url","filter","x","disabled","map","route","to","loc","pathname","path","state","undefined","search","exact","activeClassName","title","ViewSwitch","defaultRenderDirectly","mutateTitle","match","useLocation","push","SimpleRoutedSubViews","props","slice","ModelModeSelector","type","availableModes","Conf","autoSelectFirst","oneOrAll","setModes","useCallback","modeId","useEffect","length","includes","mode","onChange","MinMax","useState","dayjs","dateStart","setDateStart","dateEnd","setDateEnd","loading","setLoading","playerList","setPlayerList","a","cur","startOf","end","endOf","players","isBefore","loader","ListingDataLoader","getNextChunk","records","rec","player","id","accountId","toString","minGame","maxGame","minGamePlayer","maxGamePlayer","numGames","totalPoints","score","info","add","Object","values","min","dateMin","date","onClick","href","generatePlayerPathById","nickname","GameRecord","getRecordLink","formatFullStartTime","Math","round","ROUTES","Routes"],"mappings":"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","file":"static/js/7.4fb30eaa.chunk.js","sourcesContent":["import React, { useReducer, useContext, ReactChild } from \"react\";\nimport { useMemo } from \"react\";\nimport { GameMode } from \"../../data/types\";\n\nexport interface Model {\n  selectedModes: GameMode[];\n}\n\ntype ModelUpdate = Partial<Model>;\ntype DispatchModelUpdate = (props: ModelUpdate) => void;\n\nconst DEFAULT_MODEL: Model = { selectedModes: [] };\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nconst ModelContext = React.createContext<[Readonly<Model>, DispatchModelUpdate]>([{ ...DEFAULT_MODEL }, () => {}]);\nexport const useModel = () => useContext(ModelContext);\n\nexport function ModelModeProvider({ children }: { children: ReactChild | ReactChild[] }) {\n  const [model, updateModel] = useReducer(\n    (oldModel: Model, newProps: ModelUpdate): Model => ({\n      ...oldModel,\n      ...newProps\n    }),\n    null,\n    (): Model => ({\n      ...DEFAULT_MODEL\n    })\n  );\n  const value: [Model, DispatchModelUpdate] = useMemo(() => [model, updateModel], [model, updateModel]);\n  return <ModelContext.Provider value={value}>{children}</ModelContext.Provider>;\n}\n","import React from \"react\";\nimport { useContext } from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport { useRouteMatch, Switch, Route, Redirect, useLocation } from \"react-router\";\nimport { Helmet } from \"react-helmet\";\nimport { useTranslation } from \"react-i18next\";\n\ntype RouteDefProps = {\n  path: string;\n  exact?: boolean;\n  title: string;\n  disabled?: boolean;\n  children: React.ReactChild | React.ReactChildren;\n};\nexport const RouteDef: React.FunctionComponent<RouteDefProps> = () => {\n  throw new Error(\"Not intended for rendering\");\n};\n\ntype RoutesProps = { children: React.FunctionComponentElement<RouteDefProps>[] };\nexport const ViewRoutes: React.FunctionComponent<RoutesProps> = () => {\n  throw new Error(\"Not intended for rendering\");\n};\n\nconst Context = React.createContext<RouteDefProps[]>([]);\n\nexport function NavButtons({ className = \"\", replace = false, keepState = false, withQueryString = false }) {\n  const { t } = useTranslation(\"navButtons\");\n  const routes = useContext(Context);\n  const match = useRouteMatch() || { url: \"\" };\n  const urlBase = match.url.replace(/\\/+$/, \"\");\n  return (\n    <nav className={`nav nav-pills mb-3 ${className}`}>\n      {routes\n        .filter((x) => !x.disabled)\n        .map((route) => (\n          <NavLink\n            key={route.path}\n            to={(loc) => ({\n              pathname: `${urlBase}/${route.path}`,\n              state: keepState ? loc.state : undefined,\n              ...(withQueryString && loc.search ? { search: loc.search } : {}),\n            })}\n            replace={replace}\n            exact={!!route.exact}\n            className=\"nav-link\"\n            activeClassName=\"active\"\n          >\n            {t(route.title)}\n          </NavLink>\n        ))}\n    </nav>\n  );\n}\n\nexport function ViewSwitch({\n  defaultRenderDirectly = false,\n  mutateTitle = true,\n  children,\n}: {\n  defaultRenderDirectly?: boolean;\n  mutateTitle?: boolean;\n  children?: React.ReactChild | React.ReactChildren;\n}) {\n  const { t } = useTranslation(\"navButtons\");\n  const routes = useContext(Context);\n  const match = useRouteMatch() || { url: \"\" };\n  const loc = useLocation();\n  const urlBase = match.url.replace(/\\/+$/, \"\");\n  return (\n    <Switch>\n      {routes\n        .filter((x) => !x.disabled)\n        .map((route) => (\n          <Route exact={route.exact} key={route.path} path={`${urlBase}/${route.path}`}>\n            {mutateTitle && (\n              <Helmet>\n                <title>{t(route.title)}</title>\n              </Helmet>\n            )}\n            {route.children}\n          </Route>\n        ))}\n      <Route>\n        {defaultRenderDirectly ? (\n          routes[0].children\n        ) : (\n          <Redirect to={{ ...loc, pathname: `${urlBase}/${routes[0].path}` }} push={false} />\n        )}\n      </Route>\n      {children}\n    </Switch>\n  );\n}\n\nexport function SimpleRoutedSubViews({\n  children,\n}: {\n  children: [React.FunctionComponentElement<RoutesProps>, ...(React.ReactChild | React.ReactChildren)[]];\n}) {\n  return (\n    <Context.Provider value={children[0].props.children.map((x) => x.props)}>{children.slice(1)}</Context.Provider>\n  );\n}\n","import React, { useEffect } from \"react\";\nimport { useCallback } from \"react\";\nimport { ModeSelector } from \"../gameRecords/modeSelector\";\nimport { useModel } from \"./model\";\nimport Conf from \"../../utils/conf\";\n\nexport default function ModelModeSelector({\n  type = \"radio\" as \"radio\" | \"checkbox\",\n  availableModes = Conf.availableModes,\n  autoSelectFirst = false,\n  oneOrAll = false,\n}) {\n  const [model, updateModel] = useModel();\n  const setModes = useCallback((modeId) => updateModel({ selectedModes: modeId }), [updateModel]);\n  useEffect(() => {\n    if (!availableModes.length) {\n      return;\n    }\n    const selectedModes = (model.selectedModes || []).filter((x) => availableModes.includes(x));\n    if (!selectedModes.length) {\n      if (autoSelectFirst) {\n        updateModel({ selectedModes: [availableModes[0]] });\n      } else if (oneOrAll) {\n        updateModel({ selectedModes: availableModes });\n      }\n      return;\n    }\n    if (oneOrAll && ![1, availableModes.length].includes(selectedModes.length)) {\n      updateModel({ selectedModes: availableModes });\n      return;\n    }\n    if (type === \"radio\" && selectedModes.length > 1) {\n      updateModel({ selectedModes: [selectedModes[0]] });\n      return;\n    }\n    if (selectedModes.length !== model.selectedModes.length) {\n      updateModel({ selectedModes });\n    }\n  }, [autoSelectFirst, availableModes, model.selectedModes, oneOrAll, type, updateModel]);\n  if (Conf.availableModes.length < 2) {\n    return null;\n  }\n  return (\n    <div className=\"row mb-3\">\n      <div className=\"col\">\n        <ModeSelector type={type} mode={model.selectedModes} onChange={setModes} availableModes={availableModes} />\n      </div>\n    </div>\n  );\n}\n","import React, { useState, useCallback } from \"react\";\nimport { FormRow, DatePicker } from \"../form\";\nimport Conf from \"../../utils/conf\";\nimport Loading from \"../misc/loading\";\nimport dayjs from \"dayjs\";\nimport { ListingDataLoader } from \"../../data/source/records/loader\";\nimport { GameRecord, PlayerRecord } from \"../../data/types\";\nimport { generatePlayerPathById } from \"../gameRecords/routes\";\n\nexport default function MinMax() {\n  const [dateStart, setDateStart] = useState(() => dayjs());\n  const [dateEnd, setDateEnd] = useState(() => dayjs());\n  const [loading, setLoading] = useState(false);\n  const [playerList, setPlayerList] = useState(\n    [] as {\n      id: string;\n      minGame: GameRecord;\n      maxGame: GameRecord;\n      minGamePlayer: PlayerRecord;\n      maxGamePlayer: PlayerRecord;\n      numGames: number;\n      totalPoints: number;\n    }[]\n  );\n  const search = useCallback(async () => {\n    setLoading(true);\n    let cur = dateStart.startOf(\"day\");\n    const end = dateEnd.endOf(\"day\");\n    const players = {} as {\n      [key: string]: typeof playerList[0];\n    };\n    while (cur.isBefore(end)) {\n      const loader = new ListingDataLoader(cur, null);\n      for (;;) {\n        const records = await loader.getNextChunk();\n        if (!records.length) {\n          break;\n        }\n        for (const rec of records) {\n          for (const player of rec.players) {\n            const id = player.accountId.toString();\n            if (!(id in players)) {\n              players[id] = {\n                id,\n                minGame: rec,\n                maxGame: rec,\n                minGamePlayer: player,\n                maxGamePlayer: player,\n                numGames: 1,\n                totalPoints: player.score,\n              };\n              continue;\n            }\n            const info = players[id];\n            info.numGames++;\n            info.totalPoints += player.score;\n            if (player.score > info.maxGamePlayer.score) {\n              info.maxGame = rec;\n              info.maxGamePlayer = player;\n            }\n            if (player.score < info.minGamePlayer.score) {\n              info.minGame = rec;\n              info.minGamePlayer = player;\n            }\n          }\n        }\n      }\n      cur = cur.add(1, \"day\");\n    }\n    setPlayerList(Object.values(players));\n    setLoading(false);\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [setLoading, dateStart, dateEnd, setPlayerList, playerList]);\n  return (\n    <>\n      <FormRow title=\"开始日期\">\n        <DatePicker min={Conf.dateMin} date={dateStart} onChange={setDateStart} className=\"form-control\" />\n      </FormRow>\n      <FormRow title=\"结束日期\">\n        <DatePicker min={Conf.dateMin} date={dateEnd} onChange={setDateEnd} className=\"form-control\" />\n      </FormRow>\n      {loading ? (\n        <Loading />\n      ) : (\n        <>\n          <button type=\"button\" className=\"btn btn-primary mt-3\" onClick={search}>\n            查询\n          </button>\n          {playerList && playerList.length ? (\n            <table className=\"table table-responsive-xl table-striped table-hover mt-3\">\n              <thead>\n                <tr>\n                  <th>玩家</th>\n                  <th>最低分</th>\n                  <th>最低分比赛时间</th>\n                  <th>最高分</th>\n                  <th>最高分比赛时间</th>\n                  <th>平均点数</th>\n                </tr>\n              </thead>\n              <tbody>\n                {playerList.map((player) => (\n                  <tr key={player.id}>\n                    <td>\n                      <a href={generatePlayerPathById(player.id)}>{player.maxGamePlayer.nickname}</a>\n                    </td>\n                    <td>\n                      <a href={GameRecord.getRecordLink(player.minGame, player.minGamePlayer)}>\n                        {player.minGamePlayer.score}\n                      </a>\n                    </td>\n                    <td>{GameRecord.formatFullStartTime(player.minGame)}</td>\n                    <td>\n                      <a href={GameRecord.getRecordLink(player.maxGame, player.maxGamePlayer)}>\n                        {player.maxGamePlayer.score}\n                      </a>\n                    </td>\n                    <td>{GameRecord.formatFullStartTime(player.maxGame)}</td>\n                    <td>{Math.round(player.totalPoints / player.numGames)}</td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          ) : null}\n        </>\n      )}\n    </>\n  );\n}\n","import React from \"react\";\n\nimport { ModelModeProvider } from \"../modeModel\";\nimport { ViewRoutes, SimpleRoutedSubViews, NavButtons, RouteDef } from \"../routing\";\nimport { ViewSwitch } from \"../routing/index\";\nimport MinMax from \"./minMax\";\n\nconst ROUTES = (\n  <ViewRoutes>\n    {[\n      <RouteDef key=\"\" path=\"min-max\" title=\"最低/最高点对局\">\n        <MinMax />\n      </RouteDef>,\n    ]}\n  </ViewRoutes>\n);\n\nexport default function Routes() {\n  return (\n    <SimpleRoutedSubViews>\n      {ROUTES}\n      <ModelModeProvider>\n        <NavButtons />\n        <ViewSwitch />\n      </ModelModeProvider>\n    </SimpleRoutedSubViews>\n  );\n}\n"],"sourceRoot":""}