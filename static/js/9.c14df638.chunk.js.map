{"version":3,"sources":["components/modeModel/model.tsx","components/modeModel/modelModeSelector.tsx","components/recentHighlight/index.tsx"],"names":["DEFAULT_MODEL","selectedModes","ModelContext","React","createContext","useModel","useContext","ModelModeProvider","children","useReducer","oldModel","newProps","model","updateModel","value","useMemo","Provider","ModelModeSelector","type","availableModes","Conf","autoSelectFirst","oneOrAll","allowedCombinations","uiSetModes","useCallback","modes","length","filter","x","includes","some","comb","every","m","newAllowedCombinations","mode","removed","find","filteredCombinations","added","useEffect","className","onChange","t","i18n","bind","buildEventInfo","cellData","event","fan","役满","sum","map","count","label","language","title","slice","join","FanStatEntryList","formatFanSummary","COLUMN_EVENTINFO","makeColumn","dataKey","cellRenderer","width","getEventPlayerId","rec","player","RecentHighlightInner","provider","DataProvider","createHightlight","undefined","withActivePlayer","alwaysShowDetailLink","columns","COLUMN_PLAYERS","COLUMN_FULLTIME","RecentHighlight","useTranslation"],"mappings":"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","file":"static/js/9.c14df638.chunk.js","sourcesContent":["import React, { useReducer, useContext, ReactChild } from \"react\";\nimport { useMemo } from \"react\";\nimport { GameMode } from \"../../data/types\";\n\nexport interface Model {\n  selectedModes: GameMode[];\n}\n\ntype ModelUpdate = Partial<Model>;\ntype DispatchModelUpdate = (props: ModelUpdate) => void;\n\nconst DEFAULT_MODEL: Model = { selectedModes: [] };\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nconst ModelContext = React.createContext<[Readonly<Model>, DispatchModelUpdate]>([{ ...DEFAULT_MODEL }, () => {}]);\nexport const useModel = () => useContext(ModelContext);\n\nexport function ModelModeProvider({ children }: { children: ReactChild | ReactChild[] }) {\n  const [model, updateModel] = useReducer(\n    (oldModel: Model, newProps: ModelUpdate): Model => ({\n      ...oldModel,\n      ...newProps\n    }),\n    null,\n    (): Model => ({\n      ...DEFAULT_MODEL\n    })\n  );\n  const value: [Model, DispatchModelUpdate] = useMemo(() => [model, updateModel], [model, updateModel]);\n  return <ModelContext.Provider value={value}>{children}</ModelContext.Provider>;\n}\n","import React, { useEffect, useMemo } from \"react\";\nimport { useCallback } from \"react\";\nimport { ModeSelector } from \"../gameRecords/modeSelector\";\nimport { useModel } from \"./model\";\nimport Conf from \"../../utils/conf\";\nimport { GameMode } from \"../../data/types\";\n\nexport default function ModelModeSelector({\n  type = \"radio\" as \"radio\" | \"checkbox\",\n  availableModes = Conf.availableModes,\n  autoSelectFirst = false,\n  oneOrAll = false,\n  allowedCombinations = null as null | GameMode[][],\n}) {\n  allowedCombinations = useMemo(() => allowedCombinations || (oneOrAll ? [availableModes] : null), [\n    allowedCombinations,\n    oneOrAll,\n    availableModes,\n  ]);\n  const [model, updateModel] = useModel();\n  const uiSetModes = useCallback(\n    (modes: GameMode[]) => {\n      if (!availableModes.length) {\n        return;\n      }\n      modes = modes.filter((x) => availableModes.includes(x));\n      if (!modes.length) {\n        return;\n      }\n      if (type === \"radio\") {\n        if (model.selectedModes[0] !== modes[0]) {\n          updateModel({ selectedModes: [modes[0]] });\n        }\n        return;\n      }\n      if (modes.length > 1 && allowedCombinations) {\n        const isAllowed = allowedCombinations.some(\n          (comb) => modes.length === comb.length && modes.every((m) => comb.includes(m))\n        );\n        if (!isAllowed) {\n          let newAllowedCombinations = allowedCombinations.filter((comb) => modes.every((mode) => comb.includes(mode)));\n          if (newAllowedCombinations.length > 0) {\n            const removed = model.selectedModes.find((x) => !modes.includes(x));\n            if (removed) {\n              const filteredCombinations = newAllowedCombinations.filter((x) => !x.includes(removed));\n              if (!filteredCombinations.length) {\n                return;\n              }\n              newAllowedCombinations = filteredCombinations;\n            }\n          }\n          if (newAllowedCombinations.length > 0) {\n            modes = newAllowedCombinations[0];\n          } else {\n            const added = modes.find((x) => !model.selectedModes.includes(x));\n            if (!added) {\n              return;\n            }\n            modes = [added];\n          }\n        }\n      }\n      if (modes.length === model.selectedModes.length && modes.every((x) => model.selectedModes.includes(x))) {\n        return;\n      }\n      updateModel({ selectedModes: modes });\n    },\n    [updateModel, availableModes, model, allowedCombinations, type]\n  );\n  useEffect(() => {\n    if (!availableModes.length) {\n      return;\n    }\n    let selectedModes = (model.selectedModes || []).filter((x) => availableModes.includes(x));\n    if (\n      allowedCombinations &&\n      selectedModes.length > 1 &&\n      !allowedCombinations.some(\n        (comb) => comb.length === selectedModes.length && comb.every((mode) => selectedModes.includes(mode))\n      )\n    ) {\n      selectedModes = [];\n    }\n    if (type === \"radio\" && selectedModes.length > 1) {\n      selectedModes = [selectedModes[0]];\n    }\n\n    if (!selectedModes.length) {\n      if (autoSelectFirst) {\n        updateModel({ selectedModes: [availableModes[0]] });\n      } else if (allowedCombinations) {\n        updateModel({ selectedModes: allowedCombinations[0] });\n      }\n      return;\n    }\n    if (\n      selectedModes.length === model.selectedModes.length &&\n      selectedModes.every((x) => model.selectedModes.includes(x))\n    ) {\n      return;\n    }\n    updateModel({ selectedModes });\n  }, [autoSelectFirst, availableModes, model.selectedModes, allowedCombinations, type, updateModel]);\n  if (Conf.availableModes.length < 2) {\n    return null;\n  }\n  return (\n    <div className=\"row mb-3\">\n      <div className=\"col\">\n        <ModeSelector type={type} mode={model.selectedModes} onChange={uiSetModes} availableModes={availableModes} />\n      </div>\n    </div>\n  );\n}\n","import React, { useEffect, useMemo } from \"react\";\nimport Helmet from \"react-helmet\";\nimport { DataProvider } from \"../../data/source/records/provider\";\nimport { DataAdapterProviderCustom } from \"../gameRecords/dataAdapterProvider\";\nimport GameRecordTable, { COLUMN_PLAYERS, COLUMN_FULLTIME, makeColumn, Column } from \"../gameRecords/table\";\nimport { GameRecord, FanStatEntryList, HighlightEvent, GameRecordWithEvent } from \"../../data/types\";\nimport { TableCellProps } from \"react-virtualized/dist/es/Table\";\nimport { sum } from \"../../utils\";\nimport { Trans, useTranslation } from \"react-i18next\";\nimport i18n from \"../../i18n\";\nimport { ModelModeProvider, ModelModeSelector, useModel } from \"../modeModel\";\nimport Conf from \"../../utils/conf\";\n\nconst t = i18n.t.bind(i18n);\n\nfunction buildEventInfo({ cellData }: TableCellProps) {\n  if (!cellData) {\n    return null;\n  }\n  const event = cellData as HighlightEvent;\n  if (!event.fan[0].役满) {\n    return (\n      <span>\n        {sum(event.fan.map((x) => x.count))} <Trans>番</Trans>\n        <br />\n        <Trans>累计役满</Trans>\n      </span>\n    );\n  }\n  if (event.fan.length === 1) {\n    const label = t(event.fan[0].label);\n    if (i18n.language === \"en\") {\n      return <span title={label}>{label}</span>;\n    }\n    if (label.length > 4) {\n      return (\n        <span title={label}>\n          {label.slice(0, 4)}\n          <br />\n          {label.slice(4)}\n        </span>\n      );\n    }\n    return label;\n  } else if (event.fan.length === 2) {\n    return (\n      <span title={event.fan.map((x) => x.label).join(\"\\n\")}>\n        <Trans>{event.fan[0].label}</Trans>\n        <br />\n        <Trans>{event.fan[1].label}</Trans>\n      </span>\n    );\n  }\n  return <span title={event.fan.map((x) => x.label).join(\"\\n\")}>{FanStatEntryList.formatFanSummary(event.fan)}</span>;\n}\n\nconst COLUMN_EVENTINFO = makeColumn(() => (\n  <Column dataKey=\"event\" label={<Trans>类型</Trans>} cellRenderer={buildEventInfo} width={80} />\n))();\n\nfunction getEventPlayerId(rec: GameRecord) {\n  return (rec as GameRecordWithEvent).event.player;\n}\n\nfunction RecentHighlightInner() {\n  const [model, updateModel] = useModel();\n  const provider = useMemo(() => {\n    if (!Conf.availableModes.length) {\n      return DataProvider.createHightlight(undefined);\n    }\n    return model.selectedModes && model.selectedModes.length\n      ? DataProvider.createHightlight(model.selectedModes[0])\n      : null;\n  }, [model]);\n  useEffect(() => {\n    if (!model.selectedModes || !model.selectedModes.length) {\n      if (Conf.availableModes.length) {\n        updateModel({ selectedModes: [Conf.availableModes[0]] });\n      }\n    }\n  }, [model, updateModel]);\n  if (!provider) {\n    return <></>;\n  }\n  return (\n    <DataAdapterProviderCustom provider={provider}>\n      <GameRecordTable\n        withActivePlayer\n        alwaysShowDetailLink\n        columns={[COLUMN_EVENTINFO, COLUMN_PLAYERS(getEventPlayerId), COLUMN_FULLTIME]}\n      />\n    </DataAdapterProviderCustom>\n  );\n}\n\nexport default function RecentHighlight() {\n  const { t } = useTranslation();\n  return (\n    <>\n      <Helmet title={t(\"最近役满\")} />\n      <ModelModeProvider>\n        <ModelModeSelector />\n        <RecentHighlightInner />\n      </ModelModeProvider>\n    </>\n  );\n}\n"],"sourceRoot":""}