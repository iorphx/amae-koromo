{"version":3,"sources":["components/modeModel/model.tsx","components/routing/index.tsx","components/modeModel/modelModeSelector.tsx","components/ranking/deltaRanking.tsx","components/ranking/careerRanking.tsx","components/ranking/index.tsx"],"names":["DEFAULT_MODEL","selectedModes","ModelContext","React","createContext","useModel","useContext","ModelModeProvider","children","useReducer","oldModel","newProps","model","updateModel","value","useMemo","Provider","RouteDef","Error","ViewRoutes","Context","NavButtons","className","replace","keepState","t","useTranslation","routes","urlBase","useRouteMatch","url","filter","x","disabled","map","route","to","loc","pathname","path","state","undefined","exact","activeClassName","title","ViewSwitch","defaultRenderDirectly","mutateTitle","match","useLocation","push","SimpleRoutedSubViews","props","slice","ModelModeSelector","type","availableModes","Conf","autoSelectFirst","oneOrAll","setModes","useCallback","modeId","useEffect","length","includes","mode","onChange","RankingTable","rows","generatePlayerPathById","id","LevelWithDelta","getTag","level","nickname","delta","DeltaRanking","data1w","useAsyncFactory","getDeltaRanking","RankingTimeSpan","OneWeek","data4w","FourWeeks","modes","modeKey","bottom","top","formatter","formatPercent","showNumGames","valueLabel","extraColumns","label","index","count","col","rank_key","CareerRankingColumn","disableMixedMode","isMixedMode","data","getCareerRanking","toString","item","CareerRanking","stateName","i","Fragment","ROUTES","CareerRankingType","Rank1","Rank4","Rank12","StableLevel","PlayerMetadata","formatStableLevel2","AvgRank","formatFixed3","NumGames","formatIdentity","Win","Lose","ExpectedGamePoint0","ExpectedGamePoint1","ExpectedGamePoint2","ExpectedGamePoint3","PointEfficiency","被炸率","里宝率","一发率","被炸率Rev","里宝率Rev","一发率Rev","Routes","Array","isArray","features","ranking"],"mappings":"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","file":"static/js/6.30f24069.chunk.js","sourcesContent":["import React, { useReducer, useContext, ReactChild } from \"react\";\nimport { useMemo } from \"react\";\nimport { GameMode } from \"../../data/types\";\n\nexport interface Model {\n  selectedModes: GameMode[];\n}\n\ntype ModelUpdate = Partial<Model>;\ntype DispatchModelUpdate = (props: ModelUpdate) => void;\n\nconst DEFAULT_MODEL: Model = { selectedModes: [] };\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nconst ModelContext = React.createContext<[Readonly<Model>, DispatchModelUpdate]>([{ ...DEFAULT_MODEL }, () => {}]);\nexport const useModel = () => useContext(ModelContext);\n\nexport function ModelModeProvider({ children }: { children: ReactChild | ReactChild[] }) {\n  const [model, updateModel] = useReducer(\n    (oldModel: Model, newProps: ModelUpdate): Model => ({\n      ...oldModel,\n      ...newProps\n    }),\n    null,\n    (): Model => ({\n      ...DEFAULT_MODEL\n    })\n  );\n  const value: [Model, DispatchModelUpdate] = useMemo(() => [model, updateModel], [model, updateModel]);\n  return <ModelContext.Provider value={value}>{children}</ModelContext.Provider>;\n}\n","import React from \"react\";\nimport { useContext } from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport { useRouteMatch, Switch, Route, Redirect, useLocation } from \"react-router\";\nimport { Helmet } from \"react-helmet\";\nimport { useTranslation } from \"react-i18next\";\n\ntype RouteDefProps = {\n  path: string;\n  exact?: boolean;\n  title: string;\n  disabled?: boolean;\n  children: React.ReactChild | React.ReactChildren;\n};\nexport const RouteDef: React.FunctionComponent<RouteDefProps> = () => {\n  throw new Error(\"Not intended for rendering\");\n};\n\ntype RoutesProps = { children: React.FunctionComponentElement<RouteDefProps>[] };\nexport const ViewRoutes: React.FunctionComponent<RoutesProps> = () => {\n  throw new Error(\"Not intended for rendering\");\n};\n\nconst Context = React.createContext<RouteDefProps[]>([]);\n\nexport function NavButtons({ className = \"\", replace = false, keepState = false }) {\n  const { t } = useTranslation(\"navButtons\");\n  const routes = useContext(Context);\n  const match = useRouteMatch() || { url: \"\" };\n  const urlBase = match.url.replace(/\\/+$/, \"\");\n  return (\n    <nav className={`nav nav-pills mb-3 ${className}`}>\n      {routes\n        .filter((x) => !x.disabled)\n        .map((route) => (\n          <NavLink\n            key={route.path}\n            to={(loc) => ({\n              pathname: `${urlBase}/${route.path}`,\n              state: keepState ? loc.state : undefined,\n            })}\n            replace={replace}\n            exact={!!route.exact}\n            className=\"nav-link\"\n            activeClassName=\"active\"\n          >\n            {t(route.title)}\n          </NavLink>\n        ))}\n    </nav>\n  );\n}\n\nexport function ViewSwitch({\n  defaultRenderDirectly = false,\n  mutateTitle = true,\n  children,\n}: {\n  defaultRenderDirectly?: boolean;\n  mutateTitle?: boolean;\n  children?: React.ReactChild | React.ReactChildren;\n}) {\n  const { t } = useTranslation(\"navButtons\");\n  const routes = useContext(Context);\n  const match = useRouteMatch() || { url: \"\" };\n  const loc = useLocation();\n  const urlBase = match.url.replace(/\\/+$/, \"\");\n  return (\n    <Switch>\n      {routes\n        .filter((x) => !x.disabled)\n        .map((route) => (\n          <Route exact={route.exact} key={route.path} path={`${urlBase}/${route.path}`}>\n            {mutateTitle && (\n              <Helmet>\n                <title>{t(route.title)}</title>\n              </Helmet>\n            )}\n            {route.children}\n          </Route>\n        ))}\n      <Route>\n        {defaultRenderDirectly ? (\n          routes[0].children\n        ) : (\n          <Redirect to={{ ...loc, pathname: `${urlBase}/${routes[0].path}` }} push={false} />\n        )}\n      </Route>\n      {children}\n    </Switch>\n  );\n}\n\nexport function SimpleRoutedSubViews({\n  children,\n}: {\n  children: [React.FunctionComponentElement<RoutesProps>, ...(React.ReactChild | React.ReactChildren)[]];\n}) {\n  return (\n    <Context.Provider value={children[0].props.children.map((x) => x.props)}>{children.slice(1)}</Context.Provider>\n  );\n}\n","import React, { useEffect } from \"react\";\nimport { useCallback } from \"react\";\nimport { ModeSelector } from \"../gameRecords/modeSelector\";\nimport { useModel } from \"./model\";\nimport Conf from \"../../utils/conf\";\n\nexport default function ModelModeSelector({\n  type = \"radio\" as \"radio\" | \"checkbox\",\n  availableModes = Conf.availableModes,\n  autoSelectFirst = false,\n  oneOrAll = false,\n}) {\n  const [model, updateModel] = useModel();\n  const setModes = useCallback((modeId) => updateModel({ selectedModes: modeId }), [updateModel]);\n  useEffect(() => {\n    if (!availableModes.length) {\n      return;\n    }\n    const selectedModes = (model.selectedModes || []).filter((x) => availableModes.includes(x));\n    if (!selectedModes.length) {\n      if (autoSelectFirst) {\n        updateModel({ selectedModes: [availableModes[0]] });\n      } else if (oneOrAll) {\n        updateModel({ selectedModes: availableModes });\n      }\n      return;\n    }\n    if (oneOrAll && ![1, availableModes.length].includes(selectedModes.length)) {\n      updateModel({ selectedModes: availableModes });\n      return;\n    }\n    if (type === \"radio\" && selectedModes.length > 1) {\n      updateModel({ selectedModes: [selectedModes[0]] });\n      return;\n    }\n    if (selectedModes.length !== model.selectedModes.length) {\n      updateModel({ selectedModes });\n    }\n  }, [autoSelectFirst, availableModes, model.selectedModes, oneOrAll, type, updateModel]);\n  if (Conf.availableModes.length < 2) {\n    return null;\n  }\n  return (\n    <div className=\"row mb-3\">\n      <div className=\"col\">\n        <ModeSelector type={type} mode={model.selectedModes} onChange={setModes} availableModes={availableModes} />\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { DeltaRankingItem, RankingTimeSpan } from \"../../data/types/ranking\";\nimport { useAsyncFactory } from \"../../utils\";\nimport { getDeltaRanking } from \"../../data/source/misc\";\nimport Loading from \"../misc/loading\";\nimport { generatePlayerPathById } from \"../gameRecords/routes\";\nimport { LevelWithDelta } from \"../../data/types\";\nimport { useModel } from \"../modeModel\";\nimport { useTranslation } from \"react-i18next\";\n\nfunction RankingTable({ rows = [] as DeltaRankingItem[] }) {\n  return (\n    <table className=\"table table-striped\">\n      <tbody>\n        {rows.map(x => (\n          <tr key={x.id}>\n            <td>\n              <Link to={generatePlayerPathById(x.id)}>\n                [{LevelWithDelta.getTag(x.level)}] {x.nickname}\n              </Link>\n            </td>\n            <td className=\"text-right\">{x.delta}</td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n}\n\nexport default function DeltaRanking() {\n  const { t } = useTranslation();\n  const data1w = useAsyncFactory(\n    () => getDeltaRanking(RankingTimeSpan.OneWeek),\n    [],\n    \"getDeltaRanking(RankingTimeSpan.OneWeek)\"\n  );\n  const data4w = useAsyncFactory(\n    () => getDeltaRanking(RankingTimeSpan.FourWeeks),\n    [],\n    \"getDeltaRanking(RankingTimeSpan.FourWeeks)\"\n  );\n  const [model] = useModel();\n  const modes = model.selectedModes;\n  const modeKey = modes.length !== 1 ? 0 : modes[0];\n  if (!data1w || !data4w) {\n    return <Loading />;\n  }\n  return (\n    <>\n      <div className=\"row\">\n        <div className=\"col-lg-6\">\n          <h3 className=\"text-center\">{t(\"苦主榜\")}</h3>\n          <div className=\"row\">\n            <div className=\"col-md-6\">\n              <h4 className=\"text-center\">{t(\"一周\")}</h4>\n              <RankingTable rows={data1w[modeKey].bottom} />\n            </div>\n            <div className=\"col-md-6\">\n              <h4 className=\"text-center\">{t(\"四周\")}</h4>\n              <RankingTable rows={data4w[modeKey].bottom} />\n            </div>\n          </div>\n        </div>\n        <div className=\"col-lg-6\">\n          <h3 className=\"text-center\">{t(\"汪汪榜\")}</h3>\n          <div className=\"row\">\n            <div className=\"col-md-6\">\n              <h4 className=\"text-center\">{t(\"一周\")}</h4>\n              <RankingTable rows={data1w[modeKey].top} />\n            </div>\n            <div className=\"col-md-6\">\n              <h4 className=\"text-center\">{t(\"四周\")}</h4>\n              <RankingTable rows={data4w[modeKey].top} />\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n","/* eslint-disable @typescript-eslint/indent */\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { CareerRankingItem, CareerRankingType } from \"../../data/types/ranking\";\nimport { useAsyncFactory } from \"../../utils\";\nimport { getCareerRanking } from \"../../data/source/misc\";\nimport Loading from \"../misc/loading\";\nimport { generatePlayerPathById } from \"../gameRecords/routes\";\nimport { LevelWithDelta, GameMode } from \"../../data/types\";\nimport { formatPercent } from \"../../utils/index\";\nimport { Alert } from \"../misc/alert\";\nimport { useModel } from \"../modeModel\";\nimport { useTranslation } from \"react-i18next\";\n\ntype ExtraColumnInternal = {\n  label: string;\n  value: (item: CareerRankingItem) => string;\n};\n\ntype ExtraColumn = {\n  label: string;\n  value: (item: CareerRankingItem, mode: GameMode[]) => string;\n};\n\nfunction RankingTable({\n  rows = [] as CareerRankingItem[],\n  formatter = formatPercent as (x: number) => string,\n  showNumGames = true,\n  valueLabel = \"\",\n  extraColumns = [] as ExtraColumnInternal[],\n}) {\n  const { t } = useTranslation();\n  if (!rows || !rows.length) {\n    return <Loading />;\n  }\n  return (\n    <table className=\"table table-striped\">\n      <thead>\n        <tr>\n          <th className=\"text-right\">{t(\"排名\")}</th>\n          <th>{t(\"玩家\")}</th>\n          {showNumGames && <th className=\"text-right\">{t(\"对局数\")}</th>}\n          {extraColumns.map((x) => (\n            <th className=\"text-right\" key={x.label}>\n              {t(x.label)}\n            </th>\n          ))}\n          <th className=\"text-right\">{valueLabel}</th>\n        </tr>\n      </thead>\n      <tbody>\n        {rows.map((x, index) => (\n          <tr key={x.id}>\n            <td className=\"text-right\">{index + 1}</td>\n            <td>\n              <Link to={generatePlayerPathById(x.id)}>\n                [{LevelWithDelta.getTag(x.level)}] {x.nickname}\n              </Link>\n            </td>\n            {showNumGames && <td className=\"text-right\">{x.count}</td>}\n            {extraColumns.map((col) => (\n              <td className=\"text-right\" key={col.label}>\n                {col.value(x)}\n              </td>\n            ))}\n            <td className=\"text-right\">{formatter(x.rank_key)}</td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n}\n\nexport function CareerRankingColumn({\n  type,\n  title,\n  formatter = formatPercent,\n  showNumGames = true,\n  valueLabel = \"\",\n  disableMixedMode = false,\n  extraColumns = [],\n}: {\n  type: CareerRankingType;\n  title: string;\n  formatter?: (x: number) => string;\n  showNumGames?: boolean;\n  valueLabel?: string;\n  disableMixedMode?: boolean;\n  extraColumns?: ExtraColumn[];\n}) {\n  const { t } = useTranslation();\n  const [model] = useModel();\n  const modes = model.selectedModes;\n  const isMixedMode = modes.length !== 1;\n  const data = useAsyncFactory(\n    () => getCareerRanking(type, modes.length !== 1 ? undefined : modes[0].toString()),\n    [type, model],\n    \"getCareerRanking\"\n  );\n  return (\n    <div className=\"col-lg\">\n      <h3 className=\"text-center mb-2\">{t(title)}</h3>\n      {!disableMixedMode || !isMixedMode ? (\n        <RankingTable\n          rows={data}\n          formatter={formatter}\n          valueLabel={t(valueLabel || title)}\n          showNumGames={showNumGames}\n          extraColumns={extraColumns.map((x) => ({ ...x, value: (item) => x.value(item, modes) }))}\n        />\n      ) : (\n        <p className=\"text-center mt-4\">{t(\"请选择模式\")}</p>\n      )}\n    </div>\n  );\n}\nexport function CareerRanking({\n  children,\n}: {\n  children:\n    | React.ReactElement<ReturnType<typeof CareerRankingColumn>>\n    | React.ReactElement<ReturnType<typeof CareerRankingColumn>>[];\n}) {\n  const { t } = useTranslation();\n  if (!(\"length\" in children)) {\n    children = [children];\n  }\n  return (\n    <>\n      <Alert stateName=\"careerRankingNotice\">\n        <h4 className=\"mb-2\">{t(\"提示\")}</h4>\n        {t(\"本榜只包含有至少 300 场对局记录的玩家\")}\n      </Alert>\n      <div className=\"row\">\n        {children.map((x, i) => (\n          <React.Fragment key={i}>{x}</React.Fragment>\n        ))}\n      </div>\n    </>\n  );\n}\n","import React from \"react\";\n\nimport { Alert } from \"../misc/alert\";\nimport DeltaRanking from \"./deltaRanking\";\nimport { CareerRanking, CareerRankingColumn } from \"./careerRanking\";\nimport { ModelModeProvider, ModelModeSelector } from \"../modeModel\";\nimport { CareerRankingType } from \"../../data/types\";\nimport { PlayerMetadata } from \"../../data/types/metadata\";\nimport { formatFixed3, formatIdentity } from \"../../utils/index\";\nimport { ViewRoutes, SimpleRoutedSubViews, NavButtons, RouteDef } from \"../routing\";\nimport { ViewSwitch } from \"../routing/index\";\nimport { useTranslation } from \"react-i18next\";\nimport Conf from \"../../utils/conf\";\n\nconst ROUTES = (\n  <ViewRoutes>\n    <RouteDef path=\"delta\" title=\"苦主及汪汪\">\n      <DeltaRanking />\n    </RouteDef>\n    <RouteDef path=\"career1\" title=\"一位率/四位率\">\n      <CareerRanking>\n        <CareerRankingColumn type={CareerRankingType.Rank1} title=\"一位率\" />\n        <CareerRankingColumn type={CareerRankingType.Rank4} title=\"四位率\" />\n      </CareerRanking>\n    </RouteDef>\n    <RouteDef path=\"career2\" title=\"连对率/安定段位\">\n      <CareerRanking>\n        <CareerRankingColumn type={CareerRankingType.Rank12} title=\"连对率\" />\n        <CareerRankingColumn\n          type={CareerRankingType.StableLevel}\n          title=\"安定段位\"\n          formatter={PlayerMetadata.formatStableLevel2}\n          disableMixedMode\n        />\n      </CareerRanking>\n    </RouteDef>\n    <RouteDef path=\"career3\" title=\"平均顺位/对局数\">\n      <CareerRanking>\n        <CareerRankingColumn type={CareerRankingType.AvgRank} title=\"平均顺位\" formatter={formatFixed3} />\n        <CareerRankingColumn\n          type={CareerRankingType.NumGames}\n          title=\"对局数\"\n          formatter={formatIdentity}\n          showNumGames={false}\n        />\n      </CareerRanking>\n    </RouteDef>\n    <RouteDef path=\"winlose\" title=\"和率/铳率\">\n      <CareerRanking>\n        <CareerRankingColumn type={CareerRankingType.Win} title=\"和牌率\" />\n        <CareerRankingColumn type={CareerRankingType.Lose} title=\"放铳率\" />\n      </CareerRanking>\n    </RouteDef>\n    <RouteDef path=\"ept12\" title=\"一/二位平均 Pt\">\n      <CareerRanking>\n        <CareerRankingColumn\n          type={CareerRankingType.ExpectedGamePoint0}\n          title=\"一位平均 Pt\"\n          formatter={formatFixed3}\n          valueLabel=\"Pt\"\n          disableMixedMode\n        />\n        <CareerRankingColumn\n          type={CareerRankingType.ExpectedGamePoint1}\n          title=\"二位平均 Pt\"\n          formatter={formatFixed3}\n          valueLabel=\"Pt\"\n          disableMixedMode\n        />\n      </CareerRanking>\n    </RouteDef>\n    <RouteDef path=\"ept34\" title=\"三位平均 Pt/四位平均得点 Pt\">\n      <CareerRanking>\n        <CareerRankingColumn\n          type={CareerRankingType.ExpectedGamePoint2}\n          title=\"三位平均 Pt\"\n          formatter={formatFixed3}\n          valueLabel=\"Pt\"\n          disableMixedMode\n        />\n        <CareerRankingColumn\n          type={CareerRankingType.ExpectedGamePoint3}\n          title=\"四位平均得点 Pt\"\n          formatter={formatFixed3}\n          valueLabel=\"Pt\"\n          disableMixedMode\n        />\n      </CareerRanking>\n    </RouteDef>\n    <RouteDef path=\"efficiency\" title=\"得点效率\">\n      <CareerRanking>\n        <CareerRankingColumn\n          type={CareerRankingType.PointEfficiency}\n          title=\"得点效率\"\n          formatter={formatFixed3}\n          disableMixedMode\n        />\n      </CareerRanking>\n    </RouteDef>\n    <RouteDef path=\"lucky\" title=\"欧洲人\">\n      <CareerRanking>\n        <CareerRankingColumn showNumGames={false} type={CareerRankingType.被炸率} title=\"被炸率\" />\n        <CareerRankingColumn showNumGames={false} type={CareerRankingType.里宝率} title=\"里宝率\" />\n        <CareerRankingColumn showNumGames={false} type={CareerRankingType.一发率} title=\"一发率\" />\n      </CareerRanking>\n    </RouteDef>\n    <RouteDef path=\"unlucky\" title=\"非洲人\">\n      <CareerRanking>\n        <CareerRankingColumn showNumGames={false} type={CareerRankingType.被炸率Rev} title=\"被炸率\" />\n        <CareerRankingColumn showNumGames={false} type={CareerRankingType.里宝率Rev} title=\"里宝率\" />\n        <CareerRankingColumn showNumGames={false} type={CareerRankingType.一发率Rev} title=\"一发率\" />\n      </CareerRanking>\n    </RouteDef>\n  </ViewRoutes>\n);\n\nexport default function Routes() {\n  const { t } = useTranslation();\n  if (!Array.isArray(Conf.features.ranking)) {\n    return <></>;\n  }\n  return (\n    <SimpleRoutedSubViews>\n      {ROUTES}\n      <ModelModeProvider>\n        <Alert stateName=\"rankingNotice\">\n          <h4 className=\"mb-2\">{t(\"提示\")}</h4>\n          {t(\"排行榜非实时更新，可能会有数小时的延迟\")}\n        </Alert>\n        <NavButtons />\n        <ModelModeSelector type=\"checkbox\" oneOrAll={true} availableModes={Conf.features.ranking} />\n        <ViewSwitch />\n      </ModelModeProvider>\n    </SimpleRoutedSubViews>\n  );\n}\n"],"sourceRoot":""}