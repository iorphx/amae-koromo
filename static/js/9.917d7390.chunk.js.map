{"version":3,"sources":["components/routing/index.tsx","components/playerDetails/playerDetailsSettings.tsx","components/playerDetails/statItem.tsx","components/playerDetails/estimatedStableLevel.tsx","components/playerDetails/sameMatchRate.tsx","components/playerDetails/playerDetails.tsx"],"names":["RouteDef","Error","ViewRoutes","Context","React","createContext","NavButtons","className","replace","keepState","t","useTranslation","routes","useContext","urlBase","useRouteMatch","url","filter","x","disabled","map","route","key","path","to","loc","pathname","state","undefined","exact","activeClassName","title","ViewSwitch","defaultRenderDirectly","mutateTitle","children","match","useLocation","push","SimpleRoutedSubViews","Provider","value","props","slice","DateRangeOptions","DATE_RANGE_ITEMS","Object","keys","label","RANK_ITEMS","concat","Conf","rankColors","_","index","toString","getRankLabelByIndex","PlayerDetailsSettings","showLevel","useModel","model","updateModel","useState","type","All","startDate","Custom","mode","setMode","dateMin","customDateFrom","setCustomDateFrom","endDate","dayjs","customDateTo","setCustomDateTo","useEffect","playerId","selectedMode","Last4Weeks","subtract","setSelectedMode","useCallback","updateSearchTextFromEvent","e","searchText","currentTarget","setRank","rank","parseInt","inline","selectedItemKey","items","groupKey","onChange","min","date","availableModes","length","StatItem","description","i18nNamespace","data-tip","data-html","ENABLED_MODES","GameMode","玉","王座","三玉","三王座","EstimatedStableLevel","metadata","features","estimatedStableLevel","level","LevelWithDelta","getAdjustedLevel","includes","notEnoughData","count","expectedGamePoint","PlayerMetadata","calculateExpectedGamePoint","estimatedNumGamesToChangeLevel","getMaxPoint","isAllowedMode","curPoint","isSame","Level","id","score","delta","getStartingPoint","changeLevelMsg","levelComponents","getStableLevelComponents","levelNames","modeL","modeLabel","levelNames1","levelName2","toFixed","join","formatFixed3","estimateStableLevel2","Math","abs","SameMatchRateTable","numGames","numDisplay","currentAccountId","adapter","useDataAdapter","getCount","numProcessedGames","rates","useMemo","i","game","getItem","currentPlayer","players","find","p","accountId","player","resultSelf","Array","fill","resultOpponent","pointSelf","pointOpponent","win","entry","selfRank","GameRecord","getRankIndexByPlayer","opponentRank","calculateDeltaPoint","modeId","result","values","sort","a","b","Fragment","style","display","formatPercent","backgroundColor","RankRates","getAvg","generatePlayerPathById","nickname","onClick","data-place","isMobile","SameMatchRate","RankRateChart","Loadable","loader","loading","RecentRankChart","WinLoseDistribution","ReactTooltipPromise","ReactTooltip","ExtendedStatsViewAsync","view","stats","useAsync","extended_stats","triggerRelayout","View","PlayerExtendedStatsView","和牌率","放铳率","自摸率","默听率","流局率","流听率","副露率","立直率","和了巡数","平均打点","平均铳点","MoreStats","getTag","max_level","formatAdjustedScore","levelObj","fixMaxLevel","最大连庄","里宝率","被炸率","平均被炸点数","放铳时立直率","放铳时副露率","副露后放铳率","副露后和牌率","副露后流局率","RiichiStats","立直后和牌率","立直后放铳率","立直后非瞬间放铳率","立直收支","立直收入","立直支出","先制率","追立率","被追率","立直巡目","立直后流局率","一发率","振听立直率","BasicStats","avg_rank","negative_rate","LuckStats","役满","累计役满","最大累计番数","流满","W立直","平均起手向听","LargestLost","最近大铳","target","rel","href","getRecordLink","FanStatEntryList","formatFanSummary","fans","formatFullStartTime","start_time","FanStatEntry2","formatFan","PlayerStats","then","rebuild","getTooltip","dataTip","indexOf","document","getElementById","innerHTML","PlayerDetails","dataAdapter","getMetadata","hasMetadata","Helmet","aspect","effect","multiline","place","getContent"],"mappings":"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","file":"static/js/9.917d7390.chunk.js","sourcesContent":["import React from \"react\";\nimport { useContext } from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport { useRouteMatch, Switch, Route, Redirect, useLocation } from \"react-router\";\nimport { Helmet } from \"react-helmet\";\nimport { useTranslation } from \"react-i18next\";\n\ntype RouteDefProps = {\n  path: string;\n  exact?: boolean;\n  title: string;\n  disabled?: boolean;\n  children: React.ReactChild | React.ReactChildren;\n};\nexport const RouteDef: React.FunctionComponent<RouteDefProps> = () => {\n  throw new Error(\"Not intended for rendering\");\n};\n\ntype RoutesProps = { children: React.FunctionComponentElement<RouteDefProps>[] };\nexport const ViewRoutes: React.FunctionComponent<RoutesProps> = () => {\n  throw new Error(\"Not intended for rendering\");\n};\n\nconst Context = React.createContext<RouteDefProps[]>([]);\n\nexport function NavButtons({ className = \"\", replace = false, keepState = false }) {\n  const { t } = useTranslation(\"navButtons\");\n  const routes = useContext(Context);\n  const match = useRouteMatch() || { url: \"\" };\n  const urlBase = match.url.replace(/\\/+$/, \"\");\n  return (\n    <nav className={`nav nav-pills mb-3 ${className}`}>\n      {routes\n        .filter((x) => !x.disabled)\n        .map((route) => (\n          <NavLink\n            key={route.path}\n            to={(loc) => ({\n              pathname: `${urlBase}/${route.path}`,\n              state: keepState ? loc.state : undefined,\n            })}\n            replace={replace}\n            exact={!!route.exact}\n            className=\"nav-link\"\n            activeClassName=\"active\"\n          >\n            {t(route.title)}\n          </NavLink>\n        ))}\n    </nav>\n  );\n}\n\nexport function ViewSwitch({\n  defaultRenderDirectly = false,\n  mutateTitle = true,\n  children,\n}: {\n  defaultRenderDirectly?: boolean;\n  mutateTitle?: boolean;\n  children?: React.ReactChild | React.ReactChildren;\n}) {\n  const { t } = useTranslation(\"navButtons\");\n  const routes = useContext(Context);\n  const match = useRouteMatch() || { url: \"\" };\n  const loc = useLocation();\n  const urlBase = match.url.replace(/\\/+$/, \"\");\n  return (\n    <Switch>\n      {routes\n        .filter((x) => !x.disabled)\n        .map((route) => (\n          <Route exact={route.exact} key={route.path} path={`${urlBase}/${route.path}`}>\n            {mutateTitle && (\n              <Helmet>\n                <title>{t(route.title)}</title>\n              </Helmet>\n            )}\n            {route.children}\n          </Route>\n        ))}\n      <Route>\n        {defaultRenderDirectly ? (\n          routes[0].children\n        ) : (\n          <Redirect to={{ ...loc, pathname: `${urlBase}/${routes[0].path}` }} push={false} />\n        )}\n      </Route>\n      {children}\n    </Switch>\n  );\n}\n\nexport function SimpleRoutedSubViews({\n  children,\n}: {\n  children: [React.FunctionComponentElement<RoutesProps>, ...(React.ReactChild | React.ReactChildren)[]];\n}) {\n  return (\n    <Context.Provider value={children[0].props.children.map((x) => x.props)}>{children.slice(1)}</Context.Provider>\n  );\n}\n","import React from \"react\";\nimport { useEffect, useState, useCallback } from \"react\";\nimport { FormRow } from \"../form/formRow\";\nimport { useModel } from \"../gameRecords/model\";\nimport { CheckboxGroup, DatePicker } from \"../form\";\nimport dayjs from \"dayjs\";\nimport { ModeSelector } from \"../gameRecords/modeSelector\";\nimport Conf from \"../../utils/conf\";\nimport { getRankLabelByIndex } from \"../../data/types\";\n\nenum DateRangeOptions {\n  All = \"全部\",\n  Last4Weeks = \"最近四周\",\n  Custom = \"自定义\",\n}\nconst DATE_RANGE_ITEMS = Object.keys(DateRangeOptions).map((key: string) => ({\n  key: DateRangeOptions[key as keyof typeof DateRangeOptions],\n  label: DateRangeOptions[key as keyof typeof DateRangeOptions],\n}));\n\nconst RANK_ITEMS = [\n  {\n    key: \"All\",\n    label: \"全部\",\n  },\n].concat(\n  Conf.rankColors.map((_, index) => ({\n    key: (index + 1).toString(),\n    label: getRankLabelByIndex(index),\n  }))\n);\n\nexport default function PlayerDetailsSettings({ showLevel = false }) {\n  const [model, updateModel] = useModel();\n  const [mode, setMode] = useState(() => {\n    if (model.type !== \"player\") {\n      return DateRangeOptions.All;\n    }\n    if (!model.startDate) {\n      return DateRangeOptions.All;\n    }\n    return DateRangeOptions.Custom;\n  });\n  const [customDateFrom, setCustomDateFrom] = useState(() =>\n    model.type === \"player\" && model.startDate ? model.startDate : Conf.dateMin\n  );\n  const [customDateTo, setCustomDateTo] = useState(() =>\n    model.type === \"player\" && model.endDate ? model.endDate : dayjs()\n  );\n  useEffect(() => {\n    if (model.type !== \"player\") {\n      return;\n    }\n    switch (mode) {\n      case DateRangeOptions.All:\n        updateModel({\n          type: \"player\",\n          playerId: model.playerId,\n          startDate: null,\n          endDate: null,\n          selectedMode: undefined,\n        });\n        break;\n      case DateRangeOptions.Last4Weeks:\n        updateModel({\n          type: \"player\",\n          playerId: model.playerId,\n          startDate: dayjs().subtract(27, \"day\"),\n          endDate: null,\n        });\n        break;\n      case DateRangeOptions.Custom:\n        updateModel({\n          type: \"player\",\n          playerId: model.playerId,\n          startDate: customDateFrom,\n          endDate: customDateTo,\n        });\n        break;\n    }\n  }, [model, mode, customDateFrom, customDateTo, updateModel]);\n  const setSelectedMode = useCallback((mode) => updateModel({ type: \"player\", selectedMode: mode }), [updateModel]);\n  const updateSearchTextFromEvent = useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>) => updateModel({ type: \"player\", searchText: e.currentTarget.value }),\n    [updateModel]\n  );\n  const setRank = useCallback((rank: string) => updateModel({ type: \"player\", rank: parseInt(rank) || null }), [\n    updateModel,\n  ]);\n  if (model.type !== \"player\") {\n    return null;\n  }\n  return (\n    <div className=\"player-details-settings\">\n      <div className=\"setting\">\n        <FormRow title=\"时间\" inline={true}>\n          <CheckboxGroup\n            type=\"radio\"\n            selectedItemKey={mode}\n            items={DATE_RANGE_ITEMS}\n            groupKey=\"PlayerDetailsDateRangeSelector\"\n            onChange={setMode as (x: string) => void}\n          />\n        </FormRow>\n        {mode === DateRangeOptions.Custom ? (\n          <div className=\"custom-period\">\n            <FormRow inline={true}>\n              <DatePicker\n                min={Conf.dateMin}\n                onChange={setCustomDateFrom}\n                date={customDateFrom}\n                className=\"form-control\"\n              />\n              <DatePicker min={Conf.dateMin} onChange={setCustomDateTo} date={customDateTo} className=\"form-control\" />\n            </FormRow>\n          </div>\n        ) : null}\n      </div>\n      {showLevel && Conf.availableModes.length > 1 && (\n        <div className=\"setting\">\n          <FormRow title=\"等级\" inline={true}>\n            <ModeSelector mode={model.selectedMode} onChange={setSelectedMode} />\n          </FormRow>\n        </div>\n      )}\n      <div className=\"setting\">\n        <FormRow title=\"顺位\" inline={true}>\n          <CheckboxGroup\n            type=\"radio\"\n            selectedItemKey={(model.rank || \"All\").toString()}\n            items={RANK_ITEMS}\n            groupKey=\"PlayerDetailsRankSelector\"\n            onChange={setRank}\n          />\n        </FormRow>\n      </div>\n      {model.searchText ? (\n        <div className=\"setting\">\n          <FormRow title=\"查找玩家\">\n            <input type=\"text\" className=\"form-control\" value={model.searchText} onChange={updateSearchTextFromEvent} />\n          </FormRow>\n        </div>\n      ) : null}\n    </div>\n  );\n}\n","import React from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\nexport default function StatItem({\n  label,\n  description,\n  className = \"\",\n  i18nNamespace,\n  children\n}: {\n  label: string;\n  description?: string;\n  className?: string;\n  i18nNamespace?: string[];\n  children: React.ReactChild;\n}) {\n  const { t } = useTranslation(i18nNamespace);\n  return (\n    <>\n      <dt className={`text-nowrap ${className}`}>{t(label)}</dt>\n      <dd\n        className={`text-right ${className}`}\n        data-tip={description ? t(description) : \"\"}\n        data-html=\"true\"\n      >\n        {children}\n      </dd>\n    </>\n  );\n}\n","import React from \"react\";\nimport { LevelWithDelta, PlayerMetadata, GameMode, Level, modeLabel } from \"../../data/types\";\nimport { useModel } from \"../gameRecords/model\";\nimport StatItem from \"./statItem\";\nimport Conf from \"../../utils/conf\";\nimport { useTranslation } from \"react-i18next\";\nimport { formatFixed3 } from \"../../utils\";\n\nconst ENABLED_MODES = [GameMode.玉, GameMode.王座, GameMode.三玉, GameMode.三王座];\n\nexport default function EstimatedStableLevel({ metadata }: { metadata: PlayerMetadata }) {\n  const [model] = useModel();\n  const { t } = useTranslation();\n  if (!Conf.features.estimatedStableLevel) {\n    return null;\n  }\n  const level = LevelWithDelta.getAdjustedLevel(metadata.level);\n  if (!model.selectedMode) {\n    return null;\n  }\n  const mode = parseInt(model.selectedMode) as GameMode;\n  if (!ENABLED_MODES.includes(mode)) {\n    return null;\n  }\n  const notEnoughData = metadata.count < 100;\n  const expectedGamePoint = PlayerMetadata.calculateExpectedGamePoint(metadata, mode);\n  let estimatedNumGamesToChangeLevel = null as number | null;\n  if (level.getMaxPoint() && level.isAllowedMode(mode)) {\n    const curPoint = level.isSame(new Level(metadata.level.id))\n      ? metadata.level.score + metadata.level.delta\n      : level.getStartingPoint();\n    estimatedNumGamesToChangeLevel =\n      expectedGamePoint > 0 ? (level.getMaxPoint() - curPoint) / expectedGamePoint : curPoint / expectedGamePoint;\n  }\n  const changeLevelMsg = estimatedNumGamesToChangeLevel\n    ? t(\"，括号内为预计{{ label }}段场数\", { label: estimatedNumGamesToChangeLevel > 0 ? t(\"升\") : t(\"降\") })\n    : \"\";\n  const levelComponents = PlayerMetadata.getStableLevelComponents(metadata, mode);\n  const levelNames = \"一二三四\".slice(0, levelComponents.length);\n  const modeL = modeLabel(mode);\n  return (\n    <>\n      <StatItem\n        label=\"安定段位\"\n        description={`${t(\"在{{ modeL }}之间一直进行对局，预测最终能达到的段位。\", { modeL })}${\n          levelNames.length === 3 ? t(\"括号内为安定段位时的分数期望。\") : \"\"\n        }${notEnoughData ? t(\"（数据量不足，计算结果可能有较大偏差）\") : \"\"}<br/>${t(\n          \"{{ levelNames1 }}位平均 Pt / {{ levelName2 }}位平均得点 Pt：\",\n          {\n            levelNames1: levelNames.slice(0, levelNames.length - 1),\n            levelName2: levelNames[levelNames.length - 1]\n          }\n        )}[${levelComponents.map(x => x.toFixed(2)).join(\"/\")}]<br/>${t(\n          \"得点效率（各顺位平均 Pt 及平均得点 Pt 的加权平均值）：\"\n        )}${formatFixed3(PlayerMetadata.calculateExpectedGamePoint(metadata, mode, undefined, false))}`}\n        className={notEnoughData ? \"font-italic font-lighter text-muted\" : \"\"}\n      >\n        <span>\n          {PlayerMetadata.estimateStableLevel2(metadata, mode)}\n          {notEnoughData && \"?\"}\n        </span>\n      </StatItem>\n      <StatItem\n        label=\"分数期望\"\n        description={`${t(\"在{{ modeL }}之间每局获得点数的数学期望值{{ changeLevelMsg }}\", {\n          changeLevelMsg,\n          modeL\n        })}${notEnoughData ? t(\"（数据量不足，计算结果可能有较大偏差）\") : \"\"}`}\n        className={notEnoughData ? \"font-italic font-lighter text-muted\" : \"\"}\n      >\n        <span>\n          {expectedGamePoint.toFixed(1)}\n          {estimatedNumGamesToChangeLevel ? ` (${Math.abs(estimatedNumGamesToChangeLevel).toFixed(0)})` : \"\"}\n          {notEnoughData && \"?\"}\n        </span>\n      </StatItem>\n    </>\n  );\n}\n","import React, { useMemo } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useDataAdapter } from \"../gameRecords/dataAdapterProvider\";\nimport { PlayerRecord, RankRates, GameRecord, calculateDeltaPoint, Level } from \"../../data/types\";\nimport Loading from \"../misc/loading\";\nimport { generatePlayerPathById } from \"../gameRecords/routes\";\nimport { formatPercent, formatFixed3, isMobile } from \"../../utils\";\nimport { SimpleRoutedSubViews, ViewRoutes, RouteDef, NavButtons, ViewSwitch } from \"../routing\";\nimport { IoIosList } from \"react-icons/io\";\nimport { useModel } from \"../gameRecords/model\";\nimport { useTranslation } from \"react-i18next\";\n\nexport function SameMatchRateTable({ numGames = 100, numDisplay = 10, currentAccountId = 0 }) {\n  const { t } = useTranslation();\n  const adapter = useDataAdapter();\n  const [, updateModel] = useModel();\n  const count = adapter.getCount();\n  const numProcessedGames = Math.min(count, numGames);\n  const rates = useMemo(() => {\n    if (count <= 0) {\n      return null;\n    }\n    const map: {\n      [key: number]: {\n        player: PlayerRecord;\n        count: number;\n        resultSelf: RankRates;\n        resultOpponent: RankRates;\n        pointSelf: number;\n        pointOpponent: number;\n        win: number;\n      };\n    } = {};\n    for (let i = 0; i < numProcessedGames; i++) {\n      const game = adapter.getItem(i);\n      if (!(\"uuid\" in game)) {\n        return null; // Not loaded, try again later\n      }\n      const currentPlayer = game.players.find(p => p.accountId === currentAccountId);\n      if (!currentPlayer) {\n        throw new Error(\"Can't find current player, shouldn't happen\");\n      }\n      for (const player of game.players) {\n        if (player.accountId === currentAccountId) {\n          continue;\n        }\n        if (!map[player.accountId]) {\n          map[player.accountId] = {\n            player,\n            count: 0,\n            resultSelf: new Array<number>(game.players.length).fill(0) as RankRates,\n            resultOpponent: new Array<number>(game.players.length).fill(0) as RankRates,\n            pointSelf: 0,\n            pointOpponent: 0,\n            win: 0\n          };\n        }\n        const entry = map[player.accountId];\n        entry.count++;\n        const selfRank = GameRecord.getRankIndexByPlayer(game, currentAccountId);\n        const opponentRank = GameRecord.getRankIndexByPlayer(game, player);\n        entry.resultSelf[selfRank]++;\n        entry.resultOpponent[opponentRank]++;\n        if (selfRank < opponentRank) {\n          entry.win++;\n        }\n        entry.pointSelf += calculateDeltaPoint(\n          currentPlayer.score,\n          selfRank,\n          game.modeId,\n          new Level(currentPlayer.level),\n          true,\n          true\n        );\n        entry.pointOpponent += calculateDeltaPoint(\n          player.score,\n          opponentRank,\n          game.modeId,\n          new Level(player.level),\n          true,\n          true\n        );\n      }\n    }\n    const result = Object.values(map);\n    result.sort((a, b) => b.count - a.count);\n    return result;\n  }, [count, adapter, numProcessedGames, currentAccountId]);\n  if (count <= 0) {\n    return null;\n  }\n  if (!rates) {\n    return <Loading />;\n  }\n  return (\n    <dl className=\"row\">\n      {rates.slice(0, numDisplay).map(x => (\n        <React.Fragment key={x.player.accountId}>\n          <div style={{ display: \"none\" }} id={`smr-statistic-tip-${currentAccountId}-${x.player.accountId}`}>\n            <p className=\"mt-2\">\n              {t(\"胜率：\")}\n              {formatPercent(x.win / x.count)}\n            </p>\n            <table\n              className=\"table table-dark mb-1 text-nowrap table-sm text-right\"\n              style={{ display: \"inline-table\", backgroundColor: \"transparent\" }}\n            >\n              <thead>\n                <tr>\n                  <th></th>\n                  <th>{t(\"玩家\")}</th>\n                  <th>{t(\"对手\")}</th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr>\n                  <td className=\"text-left\">{t(\"平均顺位\")}</td>\n                  <td>{formatFixed3(RankRates.getAvg(x.resultSelf))}</td>\n                  <td>{formatFixed3(RankRates.getAvg(x.resultOpponent))}</td>\n                </tr>\n                <tr>\n                  <td className=\"text-left\">{t(\"平均得点\")}</td>\n                  <td>{formatFixed3(x.pointSelf / x.count)}</td>\n                  <td>{formatFixed3(x.pointOpponent / x.count)}</td>\n                </tr>\n                {[\"一\", \"二\", \"三\", \"四\"].slice(0, x.resultSelf.length).map((label, index) => (\n                  <tr key={index}>\n                    <td className=\"text-left\">{t(label + \"位\")}</td>\n                    <td>\n                      {formatPercent(x.resultSelf[index] / x.count)} ({x.resultSelf[index]})\n                    </td>\n                    <td>\n                      {formatPercent(x.resultOpponent[index] / x.count)} ({x.resultOpponent[index]})\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n          <dt className=\"col-8 col-lg-4 font-weight-normal\">\n            <Link to={generatePlayerPathById(x.player.accountId)}>{x.player.nickname}</Link>\n            <button\n              className=\"button-link ml-2\"\n              onClick={() => updateModel({ type: \"player\", searchText: x.player.nickname })}\n            >\n              <IoIosList />\n            </button>\n          </dt>\n          <dd className=\"col-4 col-lg-2 text-right\">\n            <span\n              data-tip={`##smr-statistic-tip-${currentAccountId}-${x.player.accountId}`}\n              data-html={true}\n              data-place={isMobile() ? \"left\" : \"top\"}\n            >\n              {\" \"}\n              {formatPercent(x.count / numProcessedGames)} ({x.count})\n            </span>\n          </dd>\n        </React.Fragment>\n      ))}\n    </dl>\n  );\n}\n\nexport default function SameMatchRate({ numDisplay = 10, currentAccountId = 0 }) {\n  return (\n    <SimpleRoutedSubViews>\n      <ViewRoutes>\n        <RouteDef path=\"latest\" title=\"最近 100 局\">\n          <SameMatchRateTable currentAccountId={currentAccountId} numDisplay={numDisplay} />\n        </RouteDef>\n        <RouteDef path=\"all\" title=\"全部\">\n          <SameMatchRateTable currentAccountId={currentAccountId} numDisplay={numDisplay} numGames={0x7fffffff} />\n        </RouteDef>\n      </ViewRoutes>\n      <NavButtons className=\"mt-n3\" />\n      <ViewSwitch mutateTitle={false} />\n    </SimpleRoutedSubViews>\n  );\n}\n","import React from \"react\";\nimport Loadable from \"../misc/customizedLoadable\";\nimport { Helmet } from \"react-helmet\";\n\nimport { useDataAdapter } from \"../gameRecords/dataAdapterProvider\";\nimport { useEffect } from \"react\";\nimport { triggerRelayout, formatPercent, useAsync, formatFixed3 } from \"../../utils/index\";\nimport {\n  LevelWithDelta,\n  PlayerExtendedStats,\n  PlayerMetadata,\n  GameRecord,\n  FanStatEntry2,\n  FanStatEntryList,\n} from \"../../data/types\";\nimport Loading from \"../misc/loading\";\nimport PlayerDetailsSettings from \"./playerDetailsSettings\";\nimport StatItem from \"./statItem\";\nimport EstimatedStableLevel from \"./estimatedStableLevel\";\nimport { Level } from \"../../data/types/level\";\nimport { ViewRoutes, RouteDef, SimpleRoutedSubViews, NavButtons, ViewSwitch } from \"../routing\";\nimport { useLocation } from \"react-router-dom\";\nimport SameMatchRate from \"./sameMatchRate\";\nimport { useTranslation } from \"react-i18next\";\n\nconst RankRateChart = Loadable({\n  loader: () => import(\"./charts/rankRate\"),\n  loading: () => <Loading />,\n});\nconst RecentRankChart = Loadable({\n  loader: () => import(\"./charts/recentRank\"),\n  loading: () => <Loading />,\n});\nconst WinLoseDistribution = Loadable({\n  loader: () => import(\"./charts/winLoseDistribution\"),\n  loading: () => <Loading />,\n});\nconst ReactTooltipPromise = import(\"react-tooltip\");\nconst ReactTooltip = Loadable({\n  loader: () => ReactTooltipPromise,\n  loading: () => null,\n});\n\nfunction ExtendedStatsViewAsync({\n  metadata,\n  view,\n}: {\n  metadata: PlayerMetadata;\n  view: React.ComponentType<{ stats: PlayerExtendedStats; metadata: PlayerMetadata }>;\n}) {\n  const stats = useAsync(metadata.extended_stats);\n  useEffect(triggerRelayout, [!!stats]);\n  if (!stats) {\n    return null;\n  }\n  const View = view;\n  return <View stats={stats} metadata={metadata} />;\n}\n\nfunction PlayerExtendedStatsView({ stats }: { stats: PlayerExtendedStats }) {\n  return (\n    <>\n      <StatItem label=\"和牌率\" description=\"和牌局数 / 总局数\">\n        {formatPercent(stats.和牌率 || 0)}\n      </StatItem>\n      <StatItem label=\"放铳率\" description=\"放铳局数 / 总局数\">\n        {formatPercent(stats.放铳率 || 0)}\n      </StatItem>\n      <StatItem label=\"自摸率\" description=\"自摸局数 / 和牌局数\">\n        {formatPercent(stats.自摸率 || 0)}\n      </StatItem>\n      <StatItem label=\"默胡率\" description=\"门清默听和牌局数 / 和牌局数\">\n        {formatPercent(stats.默听率 || 0)}\n      </StatItem>\n      <StatItem label=\"流局率\" description=\"流局局数 / 总局数\">\n        {formatPercent(stats.流局率 || 0)}\n      </StatItem>\n      <StatItem label=\"流听率\" description=\"流局听牌局数 / 流局局数\">\n        {formatPercent(stats.流听率 || 0)}\n      </StatItem>\n      <StatItem label=\"副露率\" description=\"副露局数 / 总局数\">\n        {formatPercent(stats.副露率 || 0)}\n      </StatItem>\n      <StatItem label=\"立直率\" description=\"立直局数 / 总局数\">\n        {formatPercent(stats.立直率 || 0)}\n      </StatItem>\n      <StatItem label=\"和了巡数\">{(stats.和了巡数 || 0).toFixed(3)}</StatItem>\n      <StatItem label=\"平均打点\">{stats.平均打点 || 0}</StatItem>\n      <StatItem label=\"平均铳点\">{stats.平均铳点 || 0}</StatItem>\n    </>\n  );\n}\n\nfunction fixMaxLevel(level: LevelWithDelta): LevelWithDelta {\n  const levelObj = new Level(level.id);\n  if (level.score + level.delta < levelObj.getStartingPoint()) {\n    return {\n      id: level.id,\n      score: levelObj.getStartingPoint(),\n      delta: 0,\n    };\n  }\n  return level;\n}\n\nfunction MoreStats({ stats, metadata }: { stats: PlayerExtendedStats; metadata: PlayerMetadata }) {\n  return (\n    <>\n      <StatItem label=\"最高等级\">{LevelWithDelta.getTag(metadata.max_level)}</StatItem>\n      <StatItem label=\"最高分数\" className=\"no-width\">\n        {LevelWithDelta.formatAdjustedScore(fixMaxLevel(metadata.max_level))}\n      </StatItem>\n      <StatItem label=\"最大连庄\">{stats.最大连庄 || 0}</StatItem>\n      <StatItem label=\"里宝率\" description=\"中里宝局数 / 立直和了局数\">\n        {formatPercent(stats.里宝率 || 0)}\n      </StatItem>\n      <StatItem label=\"被炸率\" description=\"被炸庄（满贯或以上）次数 / 被自摸次数\">\n        {formatPercent(stats.被炸率 || 0)}\n      </StatItem>\n      <StatItem label=\"平均被炸点数\" description=\"被炸庄（满贯或以上）点数 / 次数\">\n        {stats.平均被炸点数 || 0}\n      </StatItem>\n      <StatItem label=\"放铳时立直率\" description=\"放铳时立直次数 / 放铳次数\">\n        {formatPercent(stats.放铳时立直率 || 0)}\n      </StatItem>\n      <StatItem label=\"放铳时副露率\" description=\"放铳时副露次数 / 放铳次数\">\n        {formatPercent(stats.放铳时副露率 || 0)}\n      </StatItem>\n      <StatItem label=\"副露后放铳率\" description=\"放铳时副露次数 / 副露次数\" className=\"no-width\">\n        {formatPercent(stats.副露后放铳率 || 0)}\n      </StatItem>\n      <StatItem label=\"副露后和牌率\" description=\"副露后和牌次数 / 副露次数\">\n        {formatPercent(stats.副露后和牌率 || 0)}\n      </StatItem>\n      <StatItem label=\"副露后流局率\" description=\"副露后流局次数 / 副露次数\">\n        {formatPercent(stats.副露后流局率 || 0)}\n      </StatItem>\n      <StatItem label=\"总计局数\">{stats.count}</StatItem>\n    </>\n  );\n}\nfunction RiichiStats({ stats }: { stats: PlayerExtendedStats; metadata: PlayerMetadata }) {\n  return (\n    <>\n      <StatItem label=\"立直率\" description=\"立直局数 / 总局数\">\n        {formatPercent(stats.立直率 || 0)}\n      </StatItem>\n      <StatItem label=\"立直和了\" description=\"立直和了局数 / 立直局数\">\n        {formatPercent(stats.立直后和牌率 || 0)}\n      </StatItem>\n      <StatItem label=\"立直放铳\" description=\"立直放铳局数（含立直瞬间 / 不含立直瞬间） / 立直局数\">\n        <>\n          {formatPercent(stats.立直后放铳率 || 0)}\n          <br />\n          {formatPercent(stats.立直后非瞬间放铳率 || 0)}\n        </>\n      </StatItem>\n      <StatItem label=\"立直收支\" description=\"立直总收支（含供托） / 立直局数\">\n        {stats.立直收支 || 0}\n      </StatItem>\n      <StatItem label=\"立直收入\" description=\"立直和了收入（含供托） / 立直和了局数\">\n        {stats.立直收入 || 0}\n      </StatItem>\n      <StatItem label=\"立直支出\" description=\"立直放铳支出（含立直棒） / 立直放铳局数\">\n        {stats.立直支出 || 0}\n      </StatItem>\n      <StatItem label=\"先制率\" description=\"先制立直局数 / 立直局数\">\n        {formatPercent(stats.先制率 || 0)}\n      </StatItem>\n      <StatItem label=\"追立率\" description=\"追立局数 / 立直局数\">\n        {formatPercent(stats.追立率 || 0)}\n      </StatItem>\n      <StatItem label=\"被追率\" description=\"被追立局数 / 立直局数\">\n        {formatPercent(stats.被追率 || 0)}\n      </StatItem>\n      <StatItem label=\"立直巡目\">{formatFixed3(stats.立直巡目 || 0)}</StatItem>\n      <StatItem label=\"立直流局\" description=\"立直流局局数 / 立直局数\">\n        {formatPercent(stats.立直后流局率 || 0)}\n      </StatItem>\n      <StatItem label=\"一发率\" description=\"一发局数 / 立直和了局数\">\n        {formatPercent(stats.一发率 || 0)}\n      </StatItem>\n      <StatItem label=\"振听率\" description=\"振听立直局数（不含立直见逃） / 立直局数\">\n        {formatPercent(stats.振听立直率 || 0)}\n      </StatItem>\n    </>\n  );\n}\nfunction BasicStats({ metadata }: { metadata: PlayerMetadata }) {\n  return (\n    <>\n      <StatItem label=\"记录场数\">{metadata.count}</StatItem>\n      <StatItem label=\"记录等级\">{LevelWithDelta.getTag(metadata.level)}</StatItem>\n      <StatItem label=\"记录分数\">{LevelWithDelta.formatAdjustedScore(metadata.level)}</StatItem>\n      <ExtendedStatsViewAsync metadata={metadata} view={PlayerExtendedStatsView} />\n      <StatItem label=\"平均顺位\">{metadata.avg_rank.toFixed(3)}</StatItem>\n      <StatItem label=\"被飞率\">{formatPercent(metadata.negative_rate)}</StatItem>\n      <EstimatedStableLevel metadata={metadata} />\n    </>\n  );\n}\nfunction LuckStats({ stats }: { stats: PlayerExtendedStats }) {\n  return (\n    <>\n      <StatItem label=\"役满\" description=\"和出役满次数\">\n        {stats.役满 || 0}\n      </StatItem>\n      <StatItem label=\"累计役满\" description=\"和出累计役满次数\">\n        {stats.累计役满 || 0}\n      </StatItem>\n      <StatItem label=\"最大累计番数\" description=\"和出的最大番数（不含役满役）\">\n        {stats.最大累计番数 || 0}\n      </StatItem>\n      <StatItem label=\"流满\" description=\"流满次数\">\n        {stats.流满 || 0}\n      </StatItem>\n      <StatItem label=\"两立直\" description=\"两立直次数\">\n        {stats.W立直 || 0}\n      </StatItem>\n      <StatItem label=\"平均起手向听\">{formatFixed3(stats.平均起手向听)}</StatItem>\n    </>\n  );\n}\nfunction LargestLost({ stats, metadata }: { stats: PlayerExtendedStats; metadata: PlayerMetadata }) {\n  const { t } = useTranslation();\n  if (!stats.最近大铳) {\n    return <p className=\"text-center\">{t(\"无超过满贯大铳\")}</p>;\n  }\n  return (\n    <div>\n      <a\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n        className=\"d-flex justify-content-between font-weight-bold\"\n        href={GameRecord.getRecordLink(stats.最近大铳.id, metadata.id)}\n      >\n        <span>{FanStatEntryList.formatFanSummary(stats.最近大铳.fans)}</span>\n        <span>{GameRecord.formatFullStartTime(stats.最近大铳.start_time)}</span>\n      </a>\n      <dl className=\"stats-list mt-2\">\n        {stats.最近大铳.fans.map((x) => (\n          <StatItem key={x.label} label={x.label}>\n            {FanStatEntry2.formatFan(x)}\n          </StatItem>\n        ))}\n      </dl>\n    </div>\n  );\n}\nfunction PlayerStats({ metadata }: { metadata: PlayerMetadata }) {\n  const loc = useLocation();\n  useEffect(() => {\n    ReactTooltipPromise.then((x) => x.rebuild());\n  }, [loc.pathname]);\n  return (\n    <SimpleRoutedSubViews>\n      <ViewRoutes>\n        <RouteDef path=\"\" exact title=\"基本\">\n          <dl className=\"stats-list\">\n            <BasicStats metadata={metadata} />\n          </dl>\n        </RouteDef>\n        <RouteDef path=\"riichi\" title=\"立直\">\n          <dl className=\"stats-list\">\n            <ExtendedStatsViewAsync metadata={metadata} view={RiichiStats} />\n          </dl>\n        </RouteDef>\n        <RouteDef path=\"extended\" title=\"更多\">\n          <dl className=\"stats-list\">\n            <ExtendedStatsViewAsync metadata={metadata} view={MoreStats} />\n          </dl>\n        </RouteDef>\n        <RouteDef path=\"win-lose\" title=\"和铳分布\">\n          <ExtendedStatsViewAsync metadata={metadata} view={WinLoseDistribution} />\n        </RouteDef>\n        <RouteDef path=\"luck\" title=\"血统\">\n          <dl className=\"stats-list\">\n            <ExtendedStatsViewAsync metadata={metadata} view={LuckStats} />\n          </dl>\n        </RouteDef>\n        <RouteDef path=\"largest-lost\" title=\"最近大铳\">\n          <ExtendedStatsViewAsync metadata={metadata} view={LargestLost} />\n        </RouteDef>\n        <RouteDef path=\"same-match\" title=\"最常同桌\">\n          <SameMatchRate currentAccountId={metadata.id} />\n        </RouteDef>\n      </ViewRoutes>\n      <NavButtons className=\"mt-3\" replace keepState />\n      <ViewSwitch mutateTitle={false} />\n    </SimpleRoutedSubViews>\n  );\n}\n\nfunction getTooltip(dataTip: string): React.ReactNode {\n  if (dataTip && dataTip.indexOf && dataTip.indexOf(\"##\") === 0) {\n    return document.getElementById(dataTip.slice(2))?.innerHTML || dataTip;\n  }\n  return dataTip;\n}\n\nexport default function PlayerDetails() {\n  const { t } = useTranslation();\n  const dataAdapter = useDataAdapter();\n  const metadata = dataAdapter.getMetadata<PlayerMetadata>();\n  useEffect(() => {\n    ReactTooltipPromise.then((x) => x.rebuild());\n  });\n  useEffect(triggerRelayout, [!!metadata]);\n  const hasMetadata = metadata && metadata.nickname;\n  /* eslint-disable @typescript-eslint/no-non-null-assertion */\n  return (\n    <div>\n      {hasMetadata ? (\n        <>\n          <Helmet>\n            <title>{metadata?.nickname}</title>\n          </Helmet>\n          <h2 className=\"text-center\">\n            {t(\"玩家：\")}\n            {metadata?.nickname}\n          </h2>\n          <div className=\"row mt-4\">\n            <div className=\"col-md-8\">\n              <h3 className=\"text-center mb-4\">{t(\"最近走势\")}</h3>\n              <RecentRankChart dataAdapter={dataAdapter} playerId={metadata!.id} aspect={6} />\n              <PlayerStats metadata={metadata!} />\n            </div>\n            <div className=\"col-md-4\">\n              <h3 className=\"text-center mb-4\">{t(\"累计战绩\")}</h3>\n              <RankRateChart metadata={metadata!} />\n            </div>\n          </div>\n        </>\n      ) : (\n        <Loading />\n      )}\n      <PlayerDetailsSettings showLevel={true} />\n      <ReactTooltip effect=\"solid\" multiline={true} place=\"top\" getContent={getTooltip} className=\"stat-tooltip\" />\n    </div>\n  );\n  /* eslint-enable @typescript-eslint/no-non-null-assertion */\n}\n"],"sourceRoot":""}