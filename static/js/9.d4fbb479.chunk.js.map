{"version":3,"sources":["components/modeModel/model.tsx","components/modeModel/modelModeSelector.tsx","components/recentHighlight/index.tsx"],"names":["DEFAULT_MODEL","selectedModes","ModelContext","React","createContext","useModel","useContext","ModelModeProvider","children","useReducer","oldModel","newProps","model","updateModel","value","useMemo","Provider","ModelModeSelector","type","availableModes","Conf","autoSelectFirst","oneOrAll","setModes","useCallback","modeId","useEffect","length","filter","x","includes","className","mode","onChange","t","i18n","bind","buildEventInfo","cellData","event","fan","役满","sum","map","count","label","language","title","slice","join","FanStatEntryList","formatFanSummary","COLUMN_EVENTINFO","makeColumn","dataKey","cellRenderer","width","getEventPlayerId","rec","player","RecentHighlightInner","provider","DataProvider","createHightlight","undefined","withActivePlayer","alwaysShowDetailLink","columns","COLUMN_PLAYERS","COLUMN_FULLTIME","RecentHighlight","useTranslation"],"mappings":"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","file":"static/js/9.d4fbb479.chunk.js","sourcesContent":["import React, { useReducer, useContext, ReactChild } from \"react\";\nimport { useMemo } from \"react\";\nimport { GameMode } from \"../../data/types\";\n\nexport interface Model {\n  selectedModes: GameMode[];\n}\n\ntype ModelUpdate = Partial<Model>;\ntype DispatchModelUpdate = (props: ModelUpdate) => void;\n\nconst DEFAULT_MODEL: Model = { selectedModes: [] };\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nconst ModelContext = React.createContext<[Readonly<Model>, DispatchModelUpdate]>([{ ...DEFAULT_MODEL }, () => {}]);\nexport const useModel = () => useContext(ModelContext);\n\nexport function ModelModeProvider({ children }: { children: ReactChild | ReactChild[] }) {\n  const [model, updateModel] = useReducer(\n    (oldModel: Model, newProps: ModelUpdate): Model => ({\n      ...oldModel,\n      ...newProps\n    }),\n    null,\n    (): Model => ({\n      ...DEFAULT_MODEL\n    })\n  );\n  const value: [Model, DispatchModelUpdate] = useMemo(() => [model, updateModel], [model, updateModel]);\n  return <ModelContext.Provider value={value}>{children}</ModelContext.Provider>;\n}\n","import React, { useEffect } from \"react\";\nimport { useCallback } from \"react\";\nimport { ModeSelector } from \"../gameRecords/modeSelector\";\nimport { useModel } from \"./model\";\nimport Conf from \"../../utils/conf\";\n\nexport default function ModelModeSelector({\n  type = \"radio\" as \"radio\" | \"checkbox\",\n  availableModes = Conf.availableModes,\n  autoSelectFirst = false,\n  oneOrAll = false,\n}) {\n  const [model, updateModel] = useModel();\n  const setModes = useCallback((modeId) => updateModel({ selectedModes: modeId }), [updateModel]);\n  useEffect(() => {\n    if (!availableModes.length) {\n      return;\n    }\n    const selectedModes = (model.selectedModes || []).filter((x) => availableModes.includes(x));\n    if (!selectedModes.length) {\n      if (autoSelectFirst) {\n        updateModel({ selectedModes: [availableModes[0]] });\n      } else if (oneOrAll) {\n        updateModel({ selectedModes: availableModes });\n      }\n      return;\n    }\n    if (oneOrAll && ![1, availableModes.length].includes(selectedModes.length)) {\n      updateModel({ selectedModes: availableModes });\n      return;\n    }\n    if (type === \"radio\" && selectedModes.length > 1) {\n      updateModel({ selectedModes: [selectedModes[0]] });\n      return;\n    }\n    if (selectedModes.length !== model.selectedModes.length) {\n      updateModel({ selectedModes });\n    }\n  }, [autoSelectFirst, availableModes, model.selectedModes, oneOrAll, type, updateModel]);\n  if (Conf.availableModes.length < 2) {\n    return null;\n  }\n  return (\n    <div className=\"row mb-3\">\n      <div className=\"col\">\n        <ModeSelector type={type} mode={model.selectedModes} onChange={setModes} availableModes={availableModes} />\n      </div>\n    </div>\n  );\n}\n","import React, { useEffect, useMemo } from \"react\";\nimport Helmet from \"react-helmet\";\nimport { DataProvider } from \"../../data/source/records/provider\";\nimport { DataAdapterProviderCustom } from \"../gameRecords/dataAdapterProvider\";\nimport GameRecordTable, { COLUMN_PLAYERS, COLUMN_FULLTIME, makeColumn, Column } from \"../gameRecords/table\";\nimport { GameRecord, FanStatEntryList, HighlightEvent, GameRecordWithEvent } from \"../../data/types\";\nimport { TableCellProps } from \"react-virtualized/dist/es/Table\";\nimport { sum } from \"../../utils\";\nimport { Trans, useTranslation } from \"react-i18next\";\nimport i18n from \"../../i18n\";\nimport { ModelModeProvider, ModelModeSelector, useModel } from \"../modeModel\";\nimport Conf from \"../../utils/conf\";\n\nconst t = i18n.t.bind(i18n);\n\nfunction buildEventInfo({ cellData }: TableCellProps) {\n  if (!cellData) {\n    return null;\n  }\n  const event = cellData as HighlightEvent;\n  if (!event.fan[0].役满) {\n    return (\n      <span>\n        {sum(event.fan.map((x) => x.count))} <Trans>番</Trans>\n        <br />\n        <Trans>累计役满</Trans>\n      </span>\n    );\n  }\n  if (event.fan.length === 1) {\n    const label = t(event.fan[0].label);\n    if (i18n.language === \"en\") {\n      return <span title={label}>{label}</span>;\n    }\n    if (label.length > 4) {\n      return (\n        <span title={label}>\n          {label.slice(0, 4)}\n          <br />\n          {label.slice(4)}\n        </span>\n      );\n    }\n    return label;\n  } else if (event.fan.length === 2) {\n    return (\n      <span title={event.fan.map((x) => x.label).join(\"\\n\")}>\n        <Trans>{event.fan[0].label}</Trans>\n        <br />\n        <Trans>{event.fan[1].label}</Trans>\n      </span>\n    );\n  }\n  return <span title={event.fan.map((x) => x.label).join(\"\\n\")}>{FanStatEntryList.formatFanSummary(event.fan)}</span>;\n}\n\nconst COLUMN_EVENTINFO = makeColumn(() => (\n  <Column dataKey=\"event\" label={<Trans>类型</Trans>} cellRenderer={buildEventInfo} width={80} />\n))();\n\nfunction getEventPlayerId(rec: GameRecord) {\n  return (rec as GameRecordWithEvent).event.player;\n}\n\nfunction RecentHighlightInner() {\n  const [model, updateModel] = useModel();\n  const provider = useMemo(() => {\n    if (!Conf.availableModes.length) {\n      return DataProvider.createHightlight(undefined);\n    }\n    return model.selectedModes && model.selectedModes.length\n      ? DataProvider.createHightlight(model.selectedModes[0])\n      : null;\n  }, [model]);\n  useEffect(() => {\n    if (!model.selectedModes || !model.selectedModes.length) {\n      if (Conf.availableModes.length) {\n        updateModel({ selectedModes: [Conf.availableModes[0]] });\n      }\n    }\n  }, [model, updateModel]);\n  if (!provider) {\n    return <></>;\n  }\n  return (\n    <DataAdapterProviderCustom provider={provider}>\n      <GameRecordTable\n        withActivePlayer\n        alwaysShowDetailLink\n        columns={[COLUMN_EVENTINFO, COLUMN_PLAYERS(getEventPlayerId), COLUMN_FULLTIME]}\n      />\n    </DataAdapterProviderCustom>\n  );\n}\n\nexport default function RecentHighlight() {\n  const { t } = useTranslation();\n  return (\n    <>\n      <Helmet title={t(\"最近役满\")} />\n      <ModelModeProvider>\n        <ModelModeSelector />\n        <RecentHighlightInner />\n      </ModelModeProvider>\n    </>\n  );\n}\n"],"sourceRoot":""}