{"version":3,"sources":["components/routing/index.tsx","components/playerDetails/playerDetailsSettings.tsx","utils/preference.ts","components/playerDetails/statItem.tsx","components/playerDetails/estimatedStableLevel.tsx","components/playerDetails/sameMatchRate.tsx","components/playerDetails/playerDetails.tsx"],"names":["RouteDef","Error","ViewRoutes","Context","React","createContext","NavButtons","className","replace","keepState","t","useTranslation","routes","useContext","urlBase","useRouteMatch","url","filter","x","disabled","map","route","to","loc","pathname","path","state","undefined","exact","activeClassName","title","ViewSwitch","defaultRenderDirectly","mutateTitle","children","match","useLocation","push","SimpleRoutedSubViews","Provider","value","props","slice","DateRangeOptions","DATE_RANGE_ITEMS","Object","keys","key","label","RANK_ITEMS","concat","Conf","rankColors","_","index","toString","getRankLabelByIndex","PlayerDetailsSettings","showLevel","availableModes","useModel","model","updateModel","useState","type","All","startDate","Custom","mode","setMode","dateMin","customDateFrom","setCustomDateFrom","endDate","dayjs","customDateTo","setCustomDateTo","updateModeFromUi","useCallback","newMode","Last4Weeks","playerId","useEffect","subtract","isBefore","endOf","isAfter","Date","startOf","setSelectedMode","length","id","localStorage","setItem","canonicalDomain","JSON","stringify","e","savePlayerPreference","selectedModes","updateSearchTextFromEvent","searchText","currentTarget","setRank","rank","parseInt","inline","selectedItems","items","groupKey","onChange","min","date","StatItem","description","i18nNamespace","data-tip","data-html","ENABLED_MODES","GameMode","玉","王座","三玉","三王座","王座东","玉东","三王座东","三玉东","EstimatedStableLevel","metadata","features","estimatedStableLevel","level","LevelWithDelta","getAdjustedLevel","includes","notEnoughData","count","expectedGamePoint","PlayerMetadata","calculateExpectedGamePoint","estimatedNumGamesToChangeLevel","getMaxPoint","isAllowedMode","curPoint","isSame","Level","score","delta","getStartingPoint","changeLevelMsg","levelComponents","getStableLevelComponents","levelNames","modeL","modeLabel","levelNames1","levelName2","toFixed","join","formatFixed3","estimateStableLevel2","Math","abs","SameMatchRateTable","numGames","numDisplay","currentAccountId","adapter","useDataAdapter","getCount","numProcessedGames","rates","useMemo","i","game","getItem","currentPlayer","players","find","p","accountId","player","resultSelf","Array","fill","resultOpponent","pointSelf","pointOpponent","win","entry","selfRank","GameRecord","getRankIndexByPlayer","opponentRank","calculateDeltaPoint","modeId","result","values","sort","a","b","Fragment","style","display","formatPercent","backgroundColor","RankRates","getAvg","generatePlayerPathById","nickname","onClick","data-place","isMobile","SameMatchRate","RankRateChart","Loadable","loader","loading","RecentRankChart","WinLoseDistribution","ReactTooltipPromise","ReactTooltip","ExtendedStatsViewAsync","view","stats","useAsync","extended_stats","triggerRelayout","View","PlayerExtendedStatsView","和牌率","放铳率","自摸率","默听率","流局率","流听率","副露率","立直率","和了巡数","平均打点","平均铳点","fixMaxLevel","levelObj","MoreStats","getTag","cross_stats","max_level","formatAdjustedScore","最大连庄","里宝率","被炸率","平均被炸点数","放铳时立直率","放铳时副露率","副露后放铳率","副露后和牌率","副露后流局率","RiichiStats","立直后和牌率","立直后放铳率","立直后非瞬间放铳率","立直收支","立直收入","立直支出","先制率","追立率","被追率","立直巡目","立直后流局率","一发率","振听立直率","BasicStats","avg_rank","negative_rate","LuckStats","役满","累计役满","最大累计番数","流满","W立直","平均起手向听","LargestLost","最近大铳","target","rel","href","getRecordLink","FanStatEntryList","formatFanSummary","fans","formatFullStartTime","start_time","FanStatEntry2","formatFan","PlayerStats","then","default","rebuild","getTooltip","dataTip","indexOf","document","getElementById","innerHTML","PlayerDetails","dataAdapter","getMetadata","played_modes","savedMode","defaultValue","parse","loadPlayerPreference","newSelectedModes","modePreference","some","hasMetadata","Helmet","aspect","effect","multiline","place","getContent"],"mappings":"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","file":"static/js/9.ff3c122b.chunk.js","sourcesContent":["import React from \"react\";\nimport { useContext } from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport { useRouteMatch, Switch, Route, Redirect, useLocation } from \"react-router\";\nimport { Helmet } from \"react-helmet\";\nimport { useTranslation } from \"react-i18next\";\n\ntype RouteDefProps = {\n  path: string;\n  exact?: boolean;\n  title: string;\n  disabled?: boolean;\n  children: React.ReactChild | React.ReactChildren;\n};\nexport const RouteDef: React.FunctionComponent<RouteDefProps> = () => {\n  throw new Error(\"Not intended for rendering\");\n};\n\ntype RoutesProps = { children: React.FunctionComponentElement<RouteDefProps>[] };\nexport const ViewRoutes: React.FunctionComponent<RoutesProps> = () => {\n  throw new Error(\"Not intended for rendering\");\n};\n\nconst Context = React.createContext<RouteDefProps[]>([]);\n\nexport function NavButtons({ className = \"\", replace = false, keepState = false }) {\n  const { t } = useTranslation(\"navButtons\");\n  const routes = useContext(Context);\n  const match = useRouteMatch() || { url: \"\" };\n  const urlBase = match.url.replace(/\\/+$/, \"\");\n  return (\n    <nav className={`nav nav-pills mb-3 ${className}`}>\n      {routes\n        .filter((x) => !x.disabled)\n        .map((route) => (\n          <NavLink\n            key={route.path}\n            to={(loc) => ({\n              pathname: `${urlBase}/${route.path}`,\n              state: keepState ? loc.state : undefined,\n            })}\n            replace={replace}\n            exact={!!route.exact}\n            className=\"nav-link\"\n            activeClassName=\"active\"\n          >\n            {t(route.title)}\n          </NavLink>\n        ))}\n    </nav>\n  );\n}\n\nexport function ViewSwitch({\n  defaultRenderDirectly = false,\n  mutateTitle = true,\n  children,\n}: {\n  defaultRenderDirectly?: boolean;\n  mutateTitle?: boolean;\n  children?: React.ReactChild | React.ReactChildren;\n}) {\n  const { t } = useTranslation(\"navButtons\");\n  const routes = useContext(Context);\n  const match = useRouteMatch() || { url: \"\" };\n  const loc = useLocation();\n  const urlBase = match.url.replace(/\\/+$/, \"\");\n  return (\n    <Switch>\n      {routes\n        .filter((x) => !x.disabled)\n        .map((route) => (\n          <Route exact={route.exact} key={route.path} path={`${urlBase}/${route.path}`}>\n            {mutateTitle && (\n              <Helmet>\n                <title>{t(route.title)}</title>\n              </Helmet>\n            )}\n            {route.children}\n          </Route>\n        ))}\n      <Route>\n        {defaultRenderDirectly ? (\n          routes[0].children\n        ) : (\n          <Redirect to={{ ...loc, pathname: `${urlBase}/${routes[0].path}` }} push={false} />\n        )}\n      </Route>\n      {children}\n    </Switch>\n  );\n}\n\nexport function SimpleRoutedSubViews({\n  children,\n}: {\n  children: [React.FunctionComponentElement<RoutesProps>, ...(React.ReactChild | React.ReactChildren)[]];\n}) {\n  return (\n    <Context.Provider value={children[0].props.children.map((x) => x.props)}>{children.slice(1)}</Context.Provider>\n  );\n}\n","import React from \"react\";\nimport { useEffect, useState, useCallback } from \"react\";\nimport { FormRow } from \"../form/formRow\";\nimport { useModel } from \"../gameRecords/model\";\nimport { CheckboxGroup, DatePicker } from \"../form\";\nimport dayjs from \"dayjs\";\nimport { ModeSelector } from \"../gameRecords/modeSelector\";\nimport Conf from \"../../utils/conf\";\nimport { GameMode, getRankLabelByIndex } from \"../../data/types\";\nimport { savePlayerPreference } from \"../../utils/preference\";\n\nenum DateRangeOptions {\n  All = \"全部\",\n  Last4Weeks = \"最近四周\",\n  Custom = \"自定义\",\n}\nconst DATE_RANGE_ITEMS = Object.keys(DateRangeOptions).map((key: string) => ({\n  key: DateRangeOptions[key as keyof typeof DateRangeOptions],\n  label: DateRangeOptions[key as keyof typeof DateRangeOptions],\n  value: DateRangeOptions[key as keyof typeof DateRangeOptions],\n}));\n\nconst RANK_ITEMS = [\n  {\n    key: \"All\",\n    label: \"全部\",\n    value: \"全部\",\n  },\n].concat(\n  Conf.rankColors.map((_, index) => ({\n    key: (index + 1).toString(),\n    label: getRankLabelByIndex(index),\n    value: (index + 1).toString(),\n  }))\n);\n\nexport default function PlayerDetailsSettings({ showLevel = false, availableModes = [] as GameMode[] }) {\n  const [model, updateModel] = useModel();\n  const [mode, setMode] = useState(() => {\n    if (model.type !== \"player\") {\n      return DateRangeOptions.All;\n    }\n    if (!model.startDate) {\n      return DateRangeOptions.All;\n    }\n    return DateRangeOptions.Custom;\n  });\n  const [customDateFrom, setCustomDateFrom] = useState(() =>\n    model.type === \"player\" && model.startDate ? model.startDate : Conf.dateMin\n  );\n  const [customDateTo, setCustomDateTo] = useState(() =>\n    model.type === \"player\" && model.endDate ? model.endDate : dayjs()\n  );\n  const updateModeFromUi = useCallback(\n    (newMode: DateRangeOptions) => {\n      if (mode === newMode) {\n        return;\n      }\n      if (newMode === DateRangeOptions.Custom) {\n        if (model.type !== \"player\") {\n          return;\n        }\n        const startDate = dayjs(mode === DateRangeOptions.Last4Weeks ? model.startDate || Conf.dateMin : Conf.dateMin);\n        updateModel({\n          type: \"player\",\n          playerId: model.playerId,\n          startDate,\n          endDate: dayjs(),\n        });\n        setCustomDateFrom(startDate);\n        setCustomDateTo(dayjs());\n      }\n      setMode(newMode);\n    },\n    [mode, model, updateModel]\n  );\n  useEffect(() => {\n    if (model.type !== \"player\") {\n      return;\n    }\n    if (model.startDate === null && model.endDate === null && mode === DateRangeOptions.Custom) {\n      setCustomDateFrom(Conf.dateMin);\n      setCustomDateTo(dayjs());\n      return;\n    }\n    switch (mode) {\n      case DateRangeOptions.All:\n        updateModel({\n          type: \"player\",\n          playerId: model.playerId,\n          startDate: null,\n          endDate: null,\n        });\n        break;\n      case DateRangeOptions.Last4Weeks:\n        updateModel({\n          type: \"player\",\n          playerId: model.playerId,\n          startDate: dayjs().subtract(27, \"day\"),\n          endDate: null,\n        });\n        break;\n      case DateRangeOptions.Custom:\n        if (dayjs(customDateTo).isBefore(customDateFrom)) {\n          let to = dayjs(customDateFrom).endOf(\"day\");\n          if (to.isAfter(new Date())) {\n            to = dayjs().endOf(\"day\");\n          }\n          setCustomDateTo(to);\n          if (dayjs(customDateTo).isBefore(customDateFrom)) {\n            setCustomDateFrom(dayjs(to).startOf(\"day\"));\n          }\n          return;\n        }\n        updateModel({\n          type: \"player\",\n          playerId: model.playerId,\n          startDate: customDateFrom,\n          endDate: customDateTo,\n        });\n        break;\n    }\n  }, [model, mode, customDateFrom, customDateTo, updateModel]);\n  const setSelectedMode = useCallback(\n    (mode) => {\n      if (mode.length && model.type === \"player\") {\n        savePlayerPreference(\"modePreference\", model.playerId, mode);\n      }\n      updateModel({ type: \"player\", selectedModes: mode });\n    },\n    [model, updateModel]\n  );\n  const updateSearchTextFromEvent = useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>) => updateModel({ type: \"player\", searchText: e.currentTarget.value }),\n    [updateModel]\n  );\n  const setRank = useCallback((rank: string) => updateModel({ type: \"player\", rank: parseInt(rank) || null }), [\n    updateModel,\n  ]);\n  if (model.type !== \"player\") {\n    return null;\n  }\n  return (\n    <div className=\"player-details-settings\">\n      <div className=\"setting\">\n        <FormRow title=\"时间\" inline={true}>\n          <CheckboxGroup\n            type=\"radio\"\n            selectedItems={[mode]}\n            items={DATE_RANGE_ITEMS}\n            groupKey=\"PlayerDetailsDateRangeSelector\"\n            onChange={(items) => updateModeFromUi(items[0].value)}\n          />\n        </FormRow>\n        {mode === DateRangeOptions.Custom ? (\n          <div className=\"custom-period\">\n            <FormRow inline={true}>\n              <DatePicker\n                min={Conf.dateMin}\n                onChange={setCustomDateFrom}\n                date={customDateFrom}\n                className=\"form-control\"\n              />\n              <DatePicker min={Conf.dateMin} onChange={setCustomDateTo} date={customDateTo} className=\"form-control\" />\n            </FormRow>\n          </div>\n        ) : null}\n      </div>\n      {showLevel && availableModes.length > 0 && (\n        <div className=\"setting\">\n          <FormRow title=\"等级\" inline={true}>\n            <ModeSelector\n              type=\"checkbox\"\n              mode={model.selectedModes}\n              onChange={setSelectedMode}\n              availableModes={availableModes}\n            />\n          </FormRow>\n        </div>\n      )}\n      <div className=\"setting\">\n        <FormRow title=\"顺位\" inline={true}>\n          <CheckboxGroup\n            type=\"radio\"\n            selectedItems={[(model.rank || \"All\").toString()]}\n            items={RANK_ITEMS}\n            groupKey=\"PlayerDetailsRankSelector\"\n            onChange={(items) => setRank(items[0].key)}\n          />\n        </FormRow>\n      </div>\n      {model.searchText ? (\n        <div className=\"setting\">\n          <FormRow title=\"查找玩家\">\n            <input type=\"text\" className=\"form-control\" value={model.searchText} onChange={updateSearchTextFromEvent} />\n          </FormRow>\n        </div>\n      ) : null}\n    </div>\n  );\n}\n","import Conf from \"./conf\";\n\nexport function savePlayerPreference(key: string, id: string, value: unknown) {\n  try {\n    localStorage.setItem(`${key}${Conf.canonicalDomain}${id}`, JSON.stringify(value));\n  } catch (e) {\n    // Incognito mode, ignore\n  }\n}\n\nexport function loadPlayerPreference<T>(key: string, id: string, defaultValue: T) {\n  try {\n    return JSON.parse(localStorage.getItem(`${key}${Conf.canonicalDomain}${id}`) || \"\") ?? defaultValue;\n  } catch (e) {\n    return defaultValue;\n  }\n}\n","import React from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\nexport default function StatItem({\n  label,\n  description,\n  className = \"\",\n  i18nNamespace,\n  children\n}: {\n  label: string;\n  description?: string;\n  className?: string;\n  i18nNamespace?: string[];\n  children: React.ReactChild;\n}) {\n  const { t } = useTranslation(i18nNamespace);\n  return (\n    <>\n      <dt className={`text-nowrap ${className}`}>{t(label)}</dt>\n      <dd\n        className={`text-right ${className}`}\n        data-tip={description ? t(description) : \"\"}\n        data-html=\"true\"\n      >\n        {children}\n      </dd>\n    </>\n  );\n}\n","import React from \"react\";\nimport { LevelWithDelta, PlayerMetadata, GameMode, Level, modeLabel } from \"../../data/types\";\nimport { useModel } from \"../gameRecords/model\";\nimport StatItem from \"./statItem\";\nimport Conf from \"../../utils/conf\";\nimport { useTranslation } from \"react-i18next\";\nimport { formatFixed3 } from \"../../utils\";\n\nconst ENABLED_MODES = [GameMode.玉, GameMode.王座, GameMode.三玉, GameMode.三王座, GameMode.王座东, GameMode.玉东, GameMode.三王座东, GameMode.三玉东];\n\nexport default function EstimatedStableLevel({ metadata }: { metadata: PlayerMetadata }) {\n  const [model] = useModel();\n  const { t } = useTranslation();\n  if (!Conf.features.estimatedStableLevel) {\n    return null;\n  }\n  const level = LevelWithDelta.getAdjustedLevel(metadata.level);\n  if (!(\"selectedModes\" in model) || model.selectedModes.length !== 1) {\n    return null;\n  }\n  const mode = model.selectedModes[0];\n  if (!ENABLED_MODES.includes(mode)) {\n    return null;\n  }\n  const notEnoughData = metadata.count < 100;\n  const expectedGamePoint = PlayerMetadata.calculateExpectedGamePoint(metadata, mode);\n  let estimatedNumGamesToChangeLevel = null as number | null;\n  if (level.getMaxPoint() && level.isAllowedMode(mode)) {\n    const curPoint = level.isSame(new Level(metadata.level.id))\n      ? metadata.level.score + metadata.level.delta\n      : level.getStartingPoint();\n    estimatedNumGamesToChangeLevel =\n      expectedGamePoint > 0 ? (level.getMaxPoint() - curPoint) / expectedGamePoint : curPoint / expectedGamePoint;\n  }\n  const changeLevelMsg = estimatedNumGamesToChangeLevel\n    ? t(\"，括号内为预计{{ label }}段场数\", { label: estimatedNumGamesToChangeLevel > 0 ? t(\"升\") : t(\"降\") })\n    : \"\";\n  const levelComponents = PlayerMetadata.getStableLevelComponents(metadata, mode);\n  const levelNames = \"一二三四\".slice(0, levelComponents.length);\n  const modeL = modeLabel(mode);\n  return (\n    <>\n      <StatItem\n        label=\"安定段位\"\n        description={`${t(\"在{{ modeL }}之间一直进行对局，预测最终能达到的段位。\", { modeL })}${\n          levelNames.length === 3 ? t(\"括号内为安定段位时的分数期望。\") : \"\"\n        }${notEnoughData ? t(\"（数据量不足，计算结果可能有较大偏差）\") : \"\"}<br/>${t(\n          \"{{ levelNames1 }}位平均 Pt / {{ levelName2 }}位平均得点 Pt：\",\n          {\n            levelNames1: levelNames.slice(0, levelNames.length - 1),\n            levelName2: levelNames[levelNames.length - 1],\n          }\n        )}[${levelComponents.map((x) => x.toFixed(2)).join(\"/\")}]<br/>${t(\n          \"得点效率（各顺位平均 Pt 及平均得点 Pt 的加权平均值）：\"\n        )}${formatFixed3(PlayerMetadata.calculateExpectedGamePoint(metadata, mode, undefined, false))}`}\n        className={notEnoughData ? \"font-italic font-lighter text-muted\" : \"\"}\n      >\n        <span>\n          {PlayerMetadata.estimateStableLevel2(metadata, mode)}\n          {notEnoughData && \"?\"}\n        </span>\n      </StatItem>\n      <StatItem\n        label=\"分数期望\"\n        description={`${t(\"在{{ modeL }}之间每局获得点数的数学期望值{{ changeLevelMsg }}\", {\n          changeLevelMsg,\n          modeL,\n        })}${notEnoughData ? t(\"（数据量不足，计算结果可能有较大偏差）\") : \"\"}`}\n        className={notEnoughData ? \"font-italic font-lighter text-muted\" : \"\"}\n      >\n        <span>\n          {expectedGamePoint.toFixed(1)}\n          {estimatedNumGamesToChangeLevel ? ` (${Math.abs(estimatedNumGamesToChangeLevel).toFixed(0)})` : \"\"}\n          {notEnoughData && \"?\"}\n        </span>\n      </StatItem>\n    </>\n  );\n}\n","import React, { useMemo } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useDataAdapter } from \"../gameRecords/dataAdapterProvider\";\nimport { PlayerRecord, RankRates, GameRecord, calculateDeltaPoint, Level } from \"../../data/types\";\nimport Loading from \"../misc/loading\";\nimport { generatePlayerPathById } from \"../gameRecords/routes\";\nimport { formatPercent, formatFixed3, isMobile } from \"../../utils\";\nimport { SimpleRoutedSubViews, ViewRoutes, RouteDef, NavButtons, ViewSwitch } from \"../routing\";\nimport { IoIosList } from \"react-icons/io\";\nimport { useModel } from \"../gameRecords/model\";\nimport { useTranslation } from \"react-i18next\";\n\nexport function SameMatchRateTable({ numGames = 100, numDisplay = 10, currentAccountId = 0 }) {\n  const { t } = useTranslation();\n  const adapter = useDataAdapter();\n  const [, updateModel] = useModel();\n  const count = adapter.getCount();\n  const numProcessedGames = Math.min(count, numGames);\n  const rates = useMemo(() => {\n    if (count <= 0) {\n      return null;\n    }\n    const map: {\n      [key: number]: {\n        player: PlayerRecord;\n        count: number;\n        resultSelf: RankRates;\n        resultOpponent: RankRates;\n        pointSelf: number;\n        pointOpponent: number;\n        win: number;\n      };\n    } = {};\n    for (let i = 0; i < numProcessedGames; i++) {\n      const game = adapter.getItem(i);\n      if (!(\"uuid\" in game)) {\n        return null; // Not loaded, try again later\n      }\n      const currentPlayer = game.players.find(p => p.accountId === currentAccountId);\n      if (!currentPlayer) {\n        throw new Error(\"Can't find current player, shouldn't happen\");\n      }\n      for (const player of game.players) {\n        if (player.accountId === currentAccountId) {\n          continue;\n        }\n        if (!map[player.accountId]) {\n          map[player.accountId] = {\n            player,\n            count: 0,\n            resultSelf: new Array<number>(game.players.length).fill(0) as RankRates,\n            resultOpponent: new Array<number>(game.players.length).fill(0) as RankRates,\n            pointSelf: 0,\n            pointOpponent: 0,\n            win: 0\n          };\n        }\n        const entry = map[player.accountId];\n        entry.count++;\n        const selfRank = GameRecord.getRankIndexByPlayer(game, currentAccountId);\n        const opponentRank = GameRecord.getRankIndexByPlayer(game, player);\n        entry.resultSelf[selfRank]++;\n        entry.resultOpponent[opponentRank]++;\n        if (selfRank < opponentRank) {\n          entry.win++;\n        }\n        entry.pointSelf += calculateDeltaPoint(\n          currentPlayer.score,\n          selfRank,\n          game.modeId,\n          new Level(currentPlayer.level),\n          true,\n          true\n        );\n        entry.pointOpponent += calculateDeltaPoint(\n          player.score,\n          opponentRank,\n          game.modeId,\n          new Level(player.level),\n          true,\n          true\n        );\n      }\n    }\n    const result = Object.values(map);\n    result.sort((a, b) => b.count - a.count);\n    return result;\n  }, [count, adapter, numProcessedGames, currentAccountId]);\n  if (count <= 0) {\n    return null;\n  }\n  if (!rates) {\n    return <Loading />;\n  }\n  return (\n    <dl className=\"row\">\n      {rates.slice(0, numDisplay).map(x => (\n        <React.Fragment key={x.player.accountId}>\n          <div style={{ display: \"none\" }} id={`smr-statistic-tip-${currentAccountId}-${x.player.accountId}`}>\n            <p className=\"mt-2\">\n              {t(\"胜率：\")}\n              {formatPercent(x.win / x.count)}\n            </p>\n            <table\n              className=\"table table-dark mb-1 text-nowrap table-sm text-right\"\n              style={{ display: \"inline-table\", backgroundColor: \"transparent\" }}\n            >\n              <thead>\n                <tr>\n                  <th></th>\n                  <th>{t(\"玩家\")}</th>\n                  <th>{t(\"对手\")}</th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr>\n                  <td className=\"text-left\">{t(\"平均顺位\")}</td>\n                  <td>{formatFixed3(RankRates.getAvg(x.resultSelf))}</td>\n                  <td>{formatFixed3(RankRates.getAvg(x.resultOpponent))}</td>\n                </tr>\n                <tr>\n                  <td className=\"text-left\">{t(\"平均得点\")}</td>\n                  <td>{formatFixed3(x.pointSelf / x.count)}</td>\n                  <td>{formatFixed3(x.pointOpponent / x.count)}</td>\n                </tr>\n                {[\"一\", \"二\", \"三\", \"四\"].slice(0, x.resultSelf.length).map((label, index) => (\n                  <tr key={index}>\n                    <td className=\"text-left\">{t(label + \"位\")}</td>\n                    <td>\n                      {formatPercent(x.resultSelf[index] / x.count)} ({x.resultSelf[index]})\n                    </td>\n                    <td>\n                      {formatPercent(x.resultOpponent[index] / x.count)} ({x.resultOpponent[index]})\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n          <dt className=\"col-8 col-lg-4 font-weight-normal\">\n            <Link to={generatePlayerPathById(x.player.accountId)}>{x.player.nickname}</Link>\n            <button\n              className=\"button-link ml-2\"\n              onClick={() => updateModel({ type: \"player\", searchText: x.player.nickname })}\n            >\n              <IoIosList />\n            </button>\n          </dt>\n          <dd className=\"col-4 col-lg-2 text-right\">\n            <span\n              data-tip={`##smr-statistic-tip-${currentAccountId}-${x.player.accountId}`}\n              data-html={true}\n              data-place={isMobile() ? \"left\" : \"top\"}\n            >\n              {\" \"}\n              {formatPercent(x.count / numProcessedGames)} ({x.count})\n            </span>\n          </dd>\n        </React.Fragment>\n      ))}\n    </dl>\n  );\n}\n\nexport default function SameMatchRate({ numDisplay = 10, currentAccountId = 0 }) {\n  return (\n    <SimpleRoutedSubViews>\n      <ViewRoutes>\n        <RouteDef path=\"latest\" title=\"最近 100 局\">\n          <SameMatchRateTable currentAccountId={currentAccountId} numDisplay={numDisplay} />\n        </RouteDef>\n        <RouteDef path=\"all\" title=\"全部\">\n          <SameMatchRateTable currentAccountId={currentAccountId} numDisplay={numDisplay} numGames={0x7fffffff} />\n        </RouteDef>\n      </ViewRoutes>\n      <NavButtons className=\"mt-n3\" />\n      <ViewSwitch mutateTitle={false} />\n    </SimpleRoutedSubViews>\n  );\n}\n","import React, { useMemo } from \"react\";\nimport Loadable from \"../misc/customizedLoadable\";\nimport { Helmet } from \"react-helmet\";\n\nimport { useDataAdapter } from \"../gameRecords/dataAdapterProvider\";\nimport { useEffect } from \"react\";\nimport { triggerRelayout, formatPercent, useAsync, formatFixed3 } from \"../../utils/index\";\nimport {\n  LevelWithDelta,\n  PlayerExtendedStats,\n  PlayerMetadata,\n  GameRecord,\n  FanStatEntry2,\n  FanStatEntryList,\n} from \"../../data/types\";\nimport Loading from \"../misc/loading\";\nimport PlayerDetailsSettings from \"./playerDetailsSettings\";\nimport StatItem from \"./statItem\";\nimport EstimatedStableLevel from \"./estimatedStableLevel\";\nimport { Level } from \"../../data/types/level\";\nimport { ViewRoutes, RouteDef, SimpleRoutedSubViews, NavButtons, ViewSwitch } from \"../routing\";\nimport { useLocation } from \"react-router-dom\";\nimport SameMatchRate from \"./sameMatchRate\";\nimport { useTranslation } from \"react-i18next\";\nimport { useModel } from \"../gameRecords/model\";\nimport Conf from \"../../utils/conf\";\nimport { GameMode } from \"../../data/types/gameMode\";\nimport { loadPlayerPreference } from \"../../utils/preference\";\n\nconst RankRateChart = Loadable({\n  loader: () => import(\"./charts/rankRate\"),\n  loading: () => <Loading />,\n});\nconst RecentRankChart = Loadable({\n  loader: () => import(\"./charts/recentRank\"),\n  loading: () => <Loading />,\n});\nconst WinLoseDistribution = Loadable({\n  loader: () => import(\"./charts/winLoseDistribution\"),\n  loading: () => <Loading />,\n});\nconst ReactTooltipPromise = import(\"react-tooltip\");\nconst ReactTooltip = Loadable({\n  loader: () => ReactTooltipPromise,\n  loading: () => null,\n});\n\nfunction ExtendedStatsViewAsync({\n  metadata,\n  view,\n}: {\n  metadata: PlayerMetadata;\n  view: React.ComponentType<{ stats: PlayerExtendedStats; metadata: PlayerMetadata }>;\n}) {\n  const stats = useAsync(metadata.extended_stats);\n  useEffect(triggerRelayout, [!!stats]);\n  if (!stats) {\n    return null;\n  }\n  const View = view;\n  return <View stats={stats} metadata={metadata} />;\n}\n\nfunction PlayerExtendedStatsView({ stats }: { stats: PlayerExtendedStats }) {\n  return (\n    <>\n      <StatItem label=\"和牌率\" description=\"和牌局数 / 总局数\">\n        {formatPercent(stats.和牌率 || 0)}\n      </StatItem>\n      <StatItem label=\"放铳率\" description=\"放铳局数 / 总局数\">\n        {formatPercent(stats.放铳率 || 0)}\n      </StatItem>\n      <StatItem label=\"自摸率\" description=\"自摸局数 / 和牌局数\">\n        {formatPercent(stats.自摸率 || 0)}\n      </StatItem>\n      <StatItem label=\"默胡率\" description=\"门清默听和牌局数 / 和牌局数\">\n        {formatPercent(stats.默听率 || 0)}\n      </StatItem>\n      <StatItem label=\"流局率\" description=\"流局局数 / 总局数\">\n        {formatPercent(stats.流局率 || 0)}\n      </StatItem>\n      <StatItem label=\"流听率\" description=\"流局听牌局数 / 流局局数\">\n        {formatPercent(stats.流听率 || 0)}\n      </StatItem>\n      <StatItem label=\"副露率\" description=\"副露局数 / 总局数\">\n        {formatPercent(stats.副露率 || 0)}\n      </StatItem>\n      <StatItem label=\"立直率\" description=\"立直局数 / 总局数\">\n        {formatPercent(stats.立直率 || 0)}\n      </StatItem>\n      <StatItem label=\"和了巡数\">{(stats.和了巡数 || 0).toFixed(3)}</StatItem>\n      <StatItem label=\"平均打点\">{stats.平均打点 || 0}</StatItem>\n      <StatItem label=\"平均铳点\">{stats.平均铳点 || 0}</StatItem>\n    </>\n  );\n}\n\nfunction fixMaxLevel(level: LevelWithDelta): LevelWithDelta {\n  const levelObj = new Level(level.id);\n  if (level.score + level.delta < levelObj.getStartingPoint()) {\n    return {\n      id: level.id,\n      score: levelObj.getStartingPoint(),\n      delta: 0,\n    };\n  }\n  return level;\n}\n\nfunction MoreStats({ stats, metadata }: { stats: PlayerExtendedStats; metadata: PlayerMetadata }) {\n  return (\n    <>\n      <StatItem label=\"最高等级\">\n        {LevelWithDelta.getTag(metadata.cross_stats?.max_level || metadata.max_level)}\n      </StatItem>\n      <StatItem label=\"最高分数\" className=\"no-width\">\n        {LevelWithDelta.formatAdjustedScore(fixMaxLevel(metadata.cross_stats?.max_level || metadata.max_level))}\n      </StatItem>\n      <StatItem label=\"最大连庄\">{stats.最大连庄 || 0}</StatItem>\n      <StatItem label=\"里宝率\" description=\"中里宝局数 / 立直和了局数\">\n        {formatPercent(stats.里宝率 || 0)}\n      </StatItem>\n      <StatItem label=\"被炸率\" description=\"被炸庄（满贯或以上）次数 / 被自摸次数\">\n        {formatPercent(stats.被炸率 || 0)}\n      </StatItem>\n      <StatItem label=\"平均被炸点数\" description=\"被炸庄（满贯或以上）点数 / 次数\">\n        {stats.平均被炸点数 || 0}\n      </StatItem>\n      <StatItem label=\"放铳时立直率\" description=\"放铳时立直次数 / 放铳次数\">\n        {formatPercent(stats.放铳时立直率 || 0)}\n      </StatItem>\n      <StatItem label=\"放铳时副露率\" description=\"放铳时副露次数 / 放铳次数\">\n        {formatPercent(stats.放铳时副露率 || 0)}\n      </StatItem>\n      <StatItem label=\"副露后放铳率\" description=\"放铳时副露次数 / 副露次数\" className=\"no-width\">\n        {formatPercent(stats.副露后放铳率 || 0)}\n      </StatItem>\n      <StatItem label=\"副露后和牌率\" description=\"副露后和牌次数 / 副露次数\">\n        {formatPercent(stats.副露后和牌率 || 0)}\n      </StatItem>\n      <StatItem label=\"副露后流局率\" description=\"副露后流局次数 / 副露次数\">\n        {formatPercent(stats.副露后流局率 || 0)}\n      </StatItem>\n      <StatItem label=\"总计局数\">{stats.count}</StatItem>\n    </>\n  );\n}\nfunction RiichiStats({ stats }: { stats: PlayerExtendedStats; metadata: PlayerMetadata }) {\n  return (\n    <>\n      <StatItem label=\"立直率\" description=\"立直局数 / 总局数\">\n        {formatPercent(stats.立直率 || 0)}\n      </StatItem>\n      <StatItem label=\"立直和了\" description=\"立直和了局数 / 立直局数\">\n        {formatPercent(stats.立直后和牌率 || 0)}\n      </StatItem>\n      <StatItem label=\"立直放铳\" description=\"立直放铳局数（含立直瞬间 / 不含立直瞬间） / 立直局数\">\n        <>\n          {formatPercent(stats.立直后放铳率 || 0)}\n          <br />\n          {formatPercent(stats.立直后非瞬间放铳率 || 0)}\n        </>\n      </StatItem>\n      <StatItem label=\"立直收支\" description=\"立直总收支（含供托） / 立直局数\">\n        {stats.立直收支 || 0}\n      </StatItem>\n      <StatItem label=\"立直收入\" description=\"立直和了收入（含供托） / 立直和了局数\">\n        {stats.立直收入 || 0}\n      </StatItem>\n      <StatItem label=\"立直支出\" description=\"立直放铳支出（含立直棒） / 立直放铳局数\">\n        {stats.立直支出 || 0}\n      </StatItem>\n      <StatItem label=\"先制率\" description=\"先制立直局数 / 立直局数\">\n        {formatPercent(stats.先制率 || 0)}\n      </StatItem>\n      <StatItem label=\"追立率\" description=\"追立局数 / 立直局数\">\n        {formatPercent(stats.追立率 || 0)}\n      </StatItem>\n      <StatItem label=\"被追率\" description=\"被追立局数 / 立直局数\">\n        {formatPercent(stats.被追率 || 0)}\n      </StatItem>\n      <StatItem label=\"立直巡目\">{formatFixed3(stats.立直巡目 || 0)}</StatItem>\n      <StatItem label=\"立直流局\" description=\"立直流局局数 / 立直局数\">\n        {formatPercent(stats.立直后流局率 || 0)}\n      </StatItem>\n      <StatItem label=\"一发率\" description=\"一发局数 / 立直和了局数\">\n        {formatPercent(stats.一发率 || 0)}\n      </StatItem>\n      <StatItem label=\"振听率\" description=\"振听立直局数（不含立直见逃） / 立直局数\">\n        {formatPercent(stats.振听立直率 || 0)}\n      </StatItem>\n    </>\n  );\n}\nfunction BasicStats({ metadata }: { metadata: PlayerMetadata }) {\n  return (\n    <>\n      <StatItem label=\"记录场数\">{metadata.count}</StatItem>\n      <StatItem label=\"记录等级\">{LevelWithDelta.getTag(metadata.cross_stats?.level || metadata.level)}</StatItem>\n      <StatItem label=\"记录分数\">\n        {LevelWithDelta.formatAdjustedScore(metadata.cross_stats?.level || metadata.level)}\n      </StatItem>\n      <ExtendedStatsViewAsync metadata={metadata} view={PlayerExtendedStatsView} />\n      <StatItem label=\"平均顺位\">{metadata.avg_rank.toFixed(3)}</StatItem>\n      <StatItem label=\"被飞率\">{formatPercent(metadata.negative_rate)}</StatItem>\n      <EstimatedStableLevel metadata={metadata} />\n    </>\n  );\n}\nfunction LuckStats({ stats }: { stats: PlayerExtendedStats }) {\n  return (\n    <>\n      <StatItem label=\"役满\" description=\"和出役满次数\">\n        {stats.役满 || 0}\n      </StatItem>\n      <StatItem label=\"累计役满\" description=\"和出累计役满次数\">\n        {stats.累计役满 || 0}\n      </StatItem>\n      <StatItem label=\"最大累计番数\" description=\"和出的最大番数（不含役满役）\">\n        {stats.最大累计番数 || 0}\n      </StatItem>\n      <StatItem label=\"流满\" description=\"流满次数\">\n        {stats.流满 || 0}\n      </StatItem>\n      <StatItem label=\"两立直\" description=\"两立直次数\">\n        {stats.W立直 || 0}\n      </StatItem>\n      <StatItem label=\"平均起手向听\">{formatFixed3(stats.平均起手向听)}</StatItem>\n    </>\n  );\n}\nfunction LargestLost({ stats, metadata }: { stats: PlayerExtendedStats; metadata: PlayerMetadata }) {\n  const { t } = useTranslation();\n  if (!stats.最近大铳) {\n    return <p className=\"text-center\">{t(\"无超过满贯大铳\")}</p>;\n  }\n  return (\n    <div>\n      <a\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n        className=\"d-flex justify-content-between font-weight-bold\"\n        href={GameRecord.getRecordLink(stats.最近大铳.id, metadata.id)}\n      >\n        <span>{FanStatEntryList.formatFanSummary(stats.最近大铳.fans)}</span>\n        <span>{GameRecord.formatFullStartTime(stats.最近大铳.start_time)}</span>\n      </a>\n      <dl className=\"stats-list mt-2\">\n        {stats.最近大铳.fans.map((x) => (\n          <StatItem key={x.label} label={x.label}>\n            {FanStatEntry2.formatFan(x)}\n          </StatItem>\n        ))}\n      </dl>\n    </div>\n  );\n}\nfunction PlayerStats({ metadata }: { metadata: PlayerMetadata }) {\n  const loc = useLocation();\n  useEffect(() => {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    ReactTooltipPromise.then((x) => x.default.rebuild());\n  }, [loc.pathname]);\n  return (\n    <SimpleRoutedSubViews>\n      <ViewRoutes>\n        <RouteDef path=\"\" exact title=\"基本\">\n          <dl className=\"stats-list\">\n            <BasicStats metadata={metadata} />\n          </dl>\n        </RouteDef>\n        <RouteDef path=\"riichi\" title=\"立直\">\n          <dl className=\"stats-list\">\n            <ExtendedStatsViewAsync metadata={metadata} view={RiichiStats} />\n          </dl>\n        </RouteDef>\n        <RouteDef path=\"extended\" title=\"更多\">\n          <dl className=\"stats-list\">\n            <ExtendedStatsViewAsync metadata={metadata} view={MoreStats} />\n          </dl>\n        </RouteDef>\n        <RouteDef path=\"win-lose\" title=\"和铳分布\">\n          <ExtendedStatsViewAsync metadata={metadata} view={WinLoseDistribution} />\n        </RouteDef>\n        <RouteDef path=\"luck\" title=\"血统\">\n          <dl className=\"stats-list\">\n            <ExtendedStatsViewAsync metadata={metadata} view={LuckStats} />\n          </dl>\n        </RouteDef>\n        <RouteDef path=\"largest-lost\" title=\"最近大铳\">\n          <ExtendedStatsViewAsync metadata={metadata} view={LargestLost} />\n        </RouteDef>\n        <RouteDef path=\"same-match\" title=\"最常同桌\">\n          <SameMatchRate currentAccountId={metadata.id} />\n        </RouteDef>\n      </ViewRoutes>\n      <NavButtons className=\"mt-3\" replace keepState />\n      <ViewSwitch mutateTitle={false} />\n    </SimpleRoutedSubViews>\n  );\n}\n\nfunction getTooltip(dataTip: string): React.ReactNode {\n  if (dataTip && dataTip.indexOf && dataTip.indexOf(\"##\") === 0) {\n    return document.getElementById(dataTip.slice(2))?.innerHTML || dataTip;\n  }\n  return dataTip;\n}\n\nexport default function PlayerDetails() {\n  const { t } = useTranslation();\n  const dataAdapter = useDataAdapter();\n  const metadata = dataAdapter.getMetadata<PlayerMetadata>();\n  const [model, updateModel] = useModel();\n  const availableModes = useMemo(() => metadata?.cross_stats?.played_modes || [], [metadata]);\n  useEffect(() => {\n    if (model.type !== \"player\" || Conf.availableModes.length < 2) {\n      return;\n    }\n    if (!model.selectedModes.length) {\n      const savedMode = loadPlayerPreference<GameMode[]>(\"modePreference\", model.playerId, []);\n      if (savedMode && savedMode.length) {\n        updateModel({ type: \"player\", playerId: model.playerId, selectedModes: savedMode });\n        return;\n      }\n    }\n    if (availableModes.length) {\n      const newSelectedModes = model.selectedModes.filter((x) => availableModes.includes(x));\n      if (!newSelectedModes.length) {\n        newSelectedModes.push(Conf.modePreference.find((x) => availableModes.includes(x)) || availableModes[0]);\n      }\n      if (\n        newSelectedModes.length !== model.selectedModes.length ||\n        newSelectedModes.some((x) => !model.selectedModes.includes(x))\n      ) {\n        updateModel({ type: \"player\", playerId: model.playerId, selectedModes: newSelectedModes });\n      }\n    }\n  }, [availableModes, model, updateModel]);\n  useEffect(() => {\n    ReactTooltipPromise.then((x) => x.default.rebuild());\n  });\n  useEffect(triggerRelayout, [!!metadata]);\n  const hasMetadata = metadata && metadata.nickname;\n  /* eslint-disable @typescript-eslint/no-non-null-assertion */\n  return (\n    <div>\n      {hasMetadata ? (\n        <>\n          <Helmet>\n            <title>{metadata?.nickname}</title>\n          </Helmet>\n          <h2 className=\"text-center\">\n            {t(\"玩家：\")}\n            {metadata?.nickname}\n          </h2>\n          <div className=\"row mt-4\">\n            <div className=\"col-md-8\">\n              <h3 className=\"text-center mb-4\">{t(\"最近走势\")}</h3>\n              <RecentRankChart dataAdapter={dataAdapter} playerId={metadata!.id} aspect={6} />\n              <PlayerStats metadata={metadata!} />\n            </div>\n            <div className=\"col-md-4\">\n              <h3 className=\"text-center mb-4\">{t(\"累计战绩\")}</h3>\n              <RankRateChart metadata={metadata!} />\n            </div>\n          </div>\n        </>\n      ) : (\n        <Loading />\n      )}\n      <PlayerDetailsSettings showLevel={true} availableModes={availableModes} />\n      <ReactTooltip effect=\"solid\" multiline={true} place=\"top\" getContent={getTooltip} className=\"stat-tooltip\" />\n    </div>\n  );\n  /* eslint-enable @typescript-eslint/no-non-null-assertion */\n}\n"],"sourceRoot":""}