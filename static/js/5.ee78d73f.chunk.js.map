{"version":3,"sources":["components/modeModel/model.tsx","components/routing/index.tsx","components/modeModel/modelModeSelector.tsx","components/charts/simplePieChart.tsx","components/statistics/rankBySeats.tsx","components/statistics/dataByRank.tsx","components/statistics/fanStats.tsx","components/statistics/index.tsx"],"names":["DEFAULT_MODEL","selectedModes","ModelContext","React","createContext","useModel","useContext","ModelModeProvider","children","useReducer","oldModel","newProps","model","updateModel","value","useMemo","Provider","RouteDef","Error","ViewRoutes","Context","NavButtons","className","replace","keepState","withQueryString","t","useTranslation","routes","urlBase","useRouteMatch","url","filter","x","disabled","map","route","to","loc","pathname","path","state","undefined","search","exact","activeClassName","title","ViewSwitch","defaultRenderDirectly","mutateTitle","match","useLocation","push","SimpleRoutedSubViews","props","slice","ModelModeSelector","type","availableModes","Conf","autoSelectFirst","oneOrAll","setModes","useCallback","modeId","useEffect","length","includes","mode","onChange","DEFAULT_COLORS","RADIAN","Math","PI","renderCustomizedLabelFactory","lineHeight","innerLabelFontSize","lines","toString","trim","split","viewBox","cx","cy","outerRadius","startAngle","radius","angle","cos","y","sin","polarToCartesian","endAngle","sign","min","abs","getDeltaAngle","yStart","text","index","stroke","strokeWidth","fill","fontSize","textAnchor","dominantBaseline","defaultInnerLabel","item","innerLabel","defaultOuterLabel","outerLabel","SimplePieChart","items","outerLabelOffset","innerLabelLineHeight","colors","aspect","cells","Array","_","fillOpacity","renderCustomizedLabel","wrappedOuterLabel","ret","offsetRadius","width","height","isAnimationActive","data","nameKey","dataKey","label","valueAccessor","position","content","Chart","rates","numGames","toFixed","round","RankBySeats","useAsyncFactory","getRankRateBySeat","selectedData","HEADERS","concat","rankColors","DataByRank","getGlobalStatistics","Object","keys","parseInt","sort","a","b","indexOf","modeData","entries","localeCompare","levelId","levelData","Level","getTag","basic","rank_rates","i","formatPercent","negative_rate","formatFixed3","avg_rank","extended","和牌率","放铳率","副露率","立直率","自摸率","流局率","流听率","count","num_players","floor","reduce","SORTERS","FanStatsView","getFanStats","useState","sorterIndex","setSorterIndex","sortedData","key","id1","id2","modeLabelNonTranslated","onClick","ROUTES","features","statisticsSubPages","rankBySeat","dataByRank","fanStats","Routes"],"mappings":"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","file":"static/js/5.ee78d73f.chunk.js","sourcesContent":["import React, { useReducer, useContext, ReactChild } from \"react\";\nimport { useMemo } from \"react\";\nimport { GameMode } from \"../../data/types\";\n\nexport interface Model {\n  selectedModes: GameMode[];\n}\n\ntype ModelUpdate = Partial<Model>;\ntype DispatchModelUpdate = (props: ModelUpdate) => void;\n\nconst DEFAULT_MODEL: Model = { selectedModes: [] };\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nconst ModelContext = React.createContext<[Readonly<Model>, DispatchModelUpdate]>([{ ...DEFAULT_MODEL }, () => {}]);\nexport const useModel = () => useContext(ModelContext);\n\nexport function ModelModeProvider({ children }: { children: ReactChild | ReactChild[] }) {\n  const [model, updateModel] = useReducer(\n    (oldModel: Model, newProps: ModelUpdate): Model => ({\n      ...oldModel,\n      ...newProps\n    }),\n    null,\n    (): Model => ({\n      ...DEFAULT_MODEL\n    })\n  );\n  const value: [Model, DispatchModelUpdate] = useMemo(() => [model, updateModel], [model, updateModel]);\n  return <ModelContext.Provider value={value}>{children}</ModelContext.Provider>;\n}\n","import React from \"react\";\nimport { useContext } from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport { useRouteMatch, Switch, Route, Redirect, useLocation } from \"react-router\";\nimport { Helmet } from \"react-helmet\";\nimport { useTranslation } from \"react-i18next\";\n\ntype RouteDefProps = {\n  path: string;\n  exact?: boolean;\n  title: string;\n  disabled?: boolean;\n  children: React.ReactChild | React.ReactChildren;\n};\nexport const RouteDef: React.FunctionComponent<RouteDefProps> = () => {\n  throw new Error(\"Not intended for rendering\");\n};\n\ntype RoutesProps = { children: React.FunctionComponentElement<RouteDefProps>[] };\nexport const ViewRoutes: React.FunctionComponent<RoutesProps> = () => {\n  throw new Error(\"Not intended for rendering\");\n};\n\nconst Context = React.createContext<RouteDefProps[]>([]);\n\nexport function NavButtons({ className = \"\", replace = false, keepState = false, withQueryString = false }) {\n  const { t } = useTranslation(\"navButtons\");\n  const routes = useContext(Context);\n  const match = useRouteMatch() || { url: \"\" };\n  const urlBase = match.url.replace(/\\/+$/, \"\");\n  return (\n    <nav className={`nav nav-pills mb-3 ${className}`}>\n      {routes\n        .filter((x) => !x.disabled)\n        .map((route) => (\n          <NavLink\n            key={route.path}\n            to={(loc) => ({\n              pathname: `${urlBase}/${route.path}`,\n              state: keepState ? loc.state : undefined,\n              ...(withQueryString && loc.search ? { search: loc.search } : {}),\n            })}\n            replace={replace}\n            exact={!!route.exact}\n            className=\"nav-link\"\n            activeClassName=\"active\"\n          >\n            {t(route.title)}\n          </NavLink>\n        ))}\n    </nav>\n  );\n}\n\nexport function ViewSwitch({\n  defaultRenderDirectly = false,\n  mutateTitle = true,\n  children,\n}: {\n  defaultRenderDirectly?: boolean;\n  mutateTitle?: boolean;\n  children?: React.ReactChild | React.ReactChildren;\n}) {\n  const { t } = useTranslation(\"navButtons\");\n  const routes = useContext(Context);\n  const match = useRouteMatch() || { url: \"\" };\n  const loc = useLocation();\n  const urlBase = match.url.replace(/\\/+$/, \"\");\n  return (\n    <Switch>\n      {routes\n        .filter((x) => !x.disabled)\n        .map((route) => (\n          <Route exact={route.exact} key={route.path} path={`${urlBase}/${route.path}`}>\n            {mutateTitle && (\n              <Helmet>\n                <title>{t(route.title)}</title>\n              </Helmet>\n            )}\n            {route.children}\n          </Route>\n        ))}\n      <Route>\n        {defaultRenderDirectly ? (\n          routes[0].children\n        ) : (\n          <Redirect to={{ ...loc, pathname: `${urlBase}/${routes[0].path}` }} push={false} />\n        )}\n      </Route>\n      {children}\n    </Switch>\n  );\n}\n\nexport function SimpleRoutedSubViews({\n  children,\n}: {\n  children: [React.FunctionComponentElement<RoutesProps>, ...(React.ReactChild | React.ReactChildren)[]];\n}) {\n  return (\n    <Context.Provider value={children[0].props.children.map((x) => x.props)}>{children.slice(1)}</Context.Provider>\n  );\n}\n","import React, { useEffect } from \"react\";\nimport { useCallback } from \"react\";\nimport { ModeSelector } from \"../gameRecords/modeSelector\";\nimport { useModel } from \"./model\";\nimport Conf from \"../../utils/conf\";\n\nexport default function ModelModeSelector({\n  type = \"radio\" as \"radio\" | \"checkbox\",\n  availableModes = Conf.availableModes,\n  autoSelectFirst = false,\n  oneOrAll = false,\n}) {\n  const [model, updateModel] = useModel();\n  const setModes = useCallback((modeId) => updateModel({ selectedModes: modeId }), [updateModel]);\n  useEffect(() => {\n    if (!availableModes.length) {\n      return;\n    }\n    const selectedModes = (model.selectedModes || []).filter((x) => availableModes.includes(x));\n    if (!selectedModes.length) {\n      if (autoSelectFirst) {\n        updateModel({ selectedModes: [availableModes[0]] });\n      } else if (oneOrAll) {\n        updateModel({ selectedModes: availableModes });\n      }\n      return;\n    }\n    if (oneOrAll && ![1, availableModes.length].includes(selectedModes.length)) {\n      updateModel({ selectedModes: availableModes });\n      return;\n    }\n    if (type === \"radio\" && selectedModes.length > 1) {\n      updateModel({ selectedModes: [selectedModes[0]] });\n      return;\n    }\n    if (selectedModes.length !== model.selectedModes.length) {\n      updateModel({ selectedModes });\n    }\n  }, [autoSelectFirst, availableModes, model.selectedModes, oneOrAll, type, updateModel]);\n  if (Conf.availableModes.length < 2) {\n    return null;\n  }\n  return (\n    <div className=\"row mb-3\">\n      <div className=\"col\">\n        <ModeSelector type={type} mode={model.selectedModes} onChange={setModes} availableModes={availableModes} />\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport {\n  ResponsiveContainer,\n  PieChart,\n  Pie,\n  Cell,\n  LabelList,\n  LabelProps,\n  PolarViewBox,\n} from \"recharts\";\nimport { useMemo } from \"react\";\n\nconst DEFAULT_COLORS = [\"#003f5c\", \"#7a5195\", \"#ef5675\", \"#ffa600\"];\n\nconst getDeltaAngle = (startAngle: number, endAngle: number) => {\n  const sign = Math.sign(endAngle - startAngle);\n  const deltaAngle = Math.min(Math.abs(endAngle - startAngle), 360);\n\n  return sign * deltaAngle;\n};\n\nconst RADIAN = Math.PI / 180;\n\nconst polarToCartesian = (cx: number, cy: number, radius: number, angle: number) => ({\n  x: cx + Math.cos(-RADIAN * angle) * radius,\n  y: cy + Math.sin(-RADIAN * angle) * radius,\n});\n\nconst renderCustomizedLabelFactory = ({ lineHeight = 24, innerLabelFontSize = \"1rem\" }) => (props: LabelProps) => {\n  const { value } = props;\n  if (!value) {\n    return null;\n  }\n  const lines = value.toString().trim().split(\"\\n\");\n  const { cx, cy, outerRadius, startAngle, endAngle } = props.viewBox as Required<PolarViewBox>;\n  const labelAngle = startAngle + getDeltaAngle(startAngle, endAngle) / 2;\n  const { x, y } = polarToCartesian(cx, cy, outerRadius / 2, labelAngle);\n  const yStart = y - (lines.length - 1) * (lineHeight / 2);\n  return (\n    <g>\n      {lines.map((text, index) => (\n        <text\n          key={index}\n          x={x}\n          y={yStart + index * lineHeight}\n          stroke=\"#fff\"\n          strokeWidth=\"0.5\"\n          fill=\"#fff\"\n          fontSize={innerLabelFontSize}\n          textAnchor=\"middle\"\n          dominantBaseline=\"central\"\n        >\n          {text}\n        </text>\n      ))}\n    </g>\n  );\n};\n\nexport type PieChartItem = {\n  value: number;\n  innerLabel?: string;\n  outerLabel?: string;\n};\n\nfunction defaultInnerLabel<T extends PieChartItem>(item: T) {\n  return item.innerLabel || \"\";\n}\nfunction defaultOuterLabel<T extends PieChartItem>(item: T) {\n  return item.outerLabel || \"\";\n}\n\nexport default function SimplePieChart<T extends PieChartItem>({\n  items,\n  innerLabel = defaultInnerLabel,\n  outerLabel = defaultOuterLabel,\n  outerLabelOffset = 0,\n  innerLabelLineHeight = 24,\n  startAngle = 0,\n  colors = DEFAULT_COLORS,\n  innerLabelFontSize = \"1rem\",\n  aspect = 1,\n}: {\n  items: T[];\n  innerLabel?: (item: T) => string;\n  outerLabel?: (item: T) => string;\n  outerLabelOffset?: number;\n  innerLabelLineHeight?: number;\n  startAngle?: number;\n  colors?: string[];\n  innerLabelFontSize?: string;\n  aspect?: number;\n}) {\n  const cells = useMemo(\n    () =>\n      Array(items.length)\n        .fill(0)\n        .map((_, index) => <Cell fill={colors[index % colors.length]} fillOpacity={1} key={`cell-${index}`} />),\n    [items.length, colors]\n  );\n  const renderCustomizedLabel = useMemo(\n    () => renderCustomizedLabelFactory({ lineHeight: innerLabelLineHeight, innerLabelFontSize }),\n    [innerLabelLineHeight, innerLabelFontSize]\n  );\n  const wrappedOuterLabel = useMemo(() => {\n    const ret = (item: T) => outerLabel(item);\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (ret as any).offsetRadius = outerLabelOffset;\n    return ret;\n  }, [outerLabel, outerLabelOffset]);\n  return (\n    <ResponsiveContainer width=\"100%\" aspect={aspect} height=\"auto\">\n      <PieChart>\n        <Pie\n          isAnimationActive={false}\n          data={items}\n          nameKey=\"outerLabel\"\n          dataKey=\"value\"\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          label={wrappedOuterLabel as (x: any) => string}\n          startAngle={startAngle}\n          endAngle={startAngle + 360}\n        >\n          {cells}\n          <LabelList\n            valueAccessor={innerLabel}\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            dataKey={undefined as any}\n            position=\"inside\"\n            content={renderCustomizedLabel}\n            {...{ fill: \"#fff\" }}\n          />\n        </Pie>\n      </PieChart>\n    </ResponsiveContainer>\n  );\n}\n","import React from \"react\";\nimport { useAsyncFactory } from \"../../utils/index\";\nimport { getRankRateBySeat } from \"../../data/source/misc\";\nimport Loading from \"../misc/loading\";\nimport { useMemo } from \"react\";\nimport { useModel, ModelModeSelector } from \"../modeModel\";\nimport SimplePieChart from \"../charts/simplePieChart\";\nimport { useTranslation } from \"react-i18next\";\nimport { RankRates } from \"../../data/types\";\nimport Conf from \"../../utils/conf\";\n\nconst SEAT_LABELS = \"东南西北\";\n\nfunction Chart({ rates, numGames, aspect = 1 }: { rates: RankRates; numGames: number; aspect?: number }) {\n  const { t } = useTranslation();\n  const items = useMemo(\n    () =>\n      rates.map((x, index) => ({\n        value: x,\n        outerLabel: t(SEAT_LABELS[index]),\n        innerLabel: `${(x * 100).toFixed(2)}%\\n[${Math.round(x * numGames)}]`,\n      })),\n    [rates, numGames, t]\n  );\n  return <SimplePieChart aspect={aspect} items={items} />;\n}\n\nexport default function RankBySeats() {\n  const { t } = useTranslation();\n  const data = useAsyncFactory(getRankRateBySeat, [], \"getRankRateBySeat\");\n  const [model] = useModel();\n  if (!data) {\n    return <Loading />;\n  }\n  const selectedData = Conf.availableModes.length\n    ? model.selectedModes && model.selectedModes.length && data[model.selectedModes[0]]\n    : data[0];\n  return (\n    <>\n      <ModelModeSelector autoSelectFirst={true} />\n      {selectedData ? (\n        <>\n          <div className=\"row\">\n            <div className=\"col-lg-6\">\n              <h3 className=\"text-center\">{t(\"坐席吃一率\")}</h3>\n              <Chart rates={selectedData[1]} numGames={selectedData.numGames} />\n            </div>\n            <div className=\"col-lg-6\">\n              <h3 className=\"text-center\">{t(`坐席吃${selectedData.length > 4 ? \"四\" : \"三\"}率`)}</h3>\n              <Chart rates={selectedData[selectedData.length - 1]} numGames={selectedData.numGames} />\n            </div>\n          </div>\n          <div className=\"row\">\n            <div className=\"col text-right\">\n              {t(\"统计半庄数：\")}\n              {selectedData.numGames}\n            </div>\n          </div>\n        </>\n      ) : (\n        <></>\n      )}\n    </>\n  );\n}\n","import React, { useMemo } from \"react\";\n\nimport { useAsyncFactory, formatPercent, formatFixed3 } from \"../../utils/index\";\nimport { getGlobalStatistics } from \"../../data/source/misc\";\nimport Loading from \"../misc/loading\";\nimport { useModel } from \"../modeModel/model\";\nimport { Level } from \"../../data/types/level\";\nimport { ModelModeSelector } from \"../modeModel\";\nimport { useTranslation } from \"react-i18next\";\nimport Conf from \"../../utils/conf\";\nimport { GameMode } from \"../../data/types\";\n\nconst HEADERS = [\"等级\"].concat([\"一位率\", \"二位率\", \"三位率\", \"四位率\"].slice(0, Conf.rankColors.length), [\n  \"被飞率\",\n  \"平均顺位\",\n  \"和牌率\",\n  \"放铳率\",\n  \"副露率\",\n  \"立直率\",\n  \"自摸率\",\n  \"流局率\",\n  \"流听率\",\n  \"对战数\",\n  \"在位记录\",\n]);\n\nexport default function DataByRank() {\n  const { t } = useTranslation();\n  const data = useAsyncFactory(getGlobalStatistics, [], \"getGlobalStatistics\");\n  const availableModes = useMemo(\n    () =>\n      data\n        ? Object.keys(data)\n            .map((x) => parseInt(x, 10) as GameMode)\n            .filter((x) => x)\n            .sort((a, b) => Conf.availableModes.indexOf(a) - Conf.availableModes.indexOf(b))\n        : [],\n    [data]\n  );\n  const [model] = useModel();\n  const modeData = useMemo(() => {\n    if (!data) {\n      return undefined;\n    }\n    const selectedData = data[model.selectedModes.length !== 1 ? \"0\" : model.selectedModes[0]];\n    if (!selectedData) {\n      return undefined;\n    }\n    const modeData = Object.entries(selectedData);\n    if (!modeData) {\n      return undefined;\n    }\n    modeData.sort((a, b) => a[0].localeCompare(b[0]));\n    return modeData;\n  }, [data, model.selectedModes]);\n  if (!data) {\n    return <Loading />;\n  }\n  return (\n    <>\n      <ModelModeSelector type=\"checkbox\" availableModes={availableModes} oneOrAll={true} />\n      {modeData ? (\n        <>\n          <table className=\"table table-responsive-xl table-striped table-sm table-hover text-center\">\n            <thead className=\"vertical-table-header\">\n              <tr>\n                {HEADERS.map((x) => (\n                  <th key={x}>\n                    <div>{t(x)}</div>\n                  </th>\n                ))}\n              </tr>\n            </thead>\n            <tbody>\n              {modeData.map(([levelId, levelData]) => (\n                <tr key={levelId}>\n                  <td className=\"text-nowrap\">{new Level(parseInt(levelId)).getTag()}</td>\n                  {levelData.basic.rank_rates.slice(0, Conf.rankColors.length).map((x, i) => (\n                    <td key={i}>{formatPercent(x)}</td>\n                  ))}\n                  <td>{formatPercent(levelData.basic.negative_rate)}</td>\n                  <td>{formatFixed3(levelData.basic.avg_rank)}</td>\n                  <td>{formatPercent(levelData.extended.和牌率)}</td>\n                  <td>{formatPercent(levelData.extended.放铳率)}</td>\n                  <td>{formatPercent(levelData.extended.副露率)}</td>\n                  <td>{formatPercent(levelData.extended.立直率)}</td>\n                  <td>{formatPercent(levelData.extended.自摸率)}</td>\n                  <td>{formatPercent(levelData.extended.流局率)}</td>\n                  <td>{formatPercent(levelData.extended.流听率)}</td>\n                  <td>{levelData.basic.count}</td>\n                  <td>{levelData.num_players}</td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n          <div className=\"row\">\n            <div className=\"col text-right\">\n              {t(\"统计半庄数：\")}\n              {Math.floor(\n                modeData.map(([, levelData]) => levelData.basic.count).reduce((a, b) => a + b, 0) /\n                  Conf.rankColors.length\n              )}\n            </div>\n          </div>\n        </>\n      ) : (\n        <Loading />\n      )}\n    </>\n  );\n}\n","import React from \"react\";\n\nimport { useAsyncFactory, formatPercent } from \"../../utils/index\";\nimport { getFanStats } from \"../../data/source/misc\";\nimport Loading from \"../misc/loading\";\nimport { FanStatEntry, FanStats, GameMode, modeLabelNonTranslated } from \"../../data/types\";\nimport { useState, useMemo } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport Conf from \"../../utils/conf\";\n\nconst SORTERS: (undefined | ((a: FanStatEntry, b: FanStatEntry) => number))[] = [\n  undefined,\n  (a, b) => a.count - b.count,\n  (a, b) => b.count - a.count,\n];\n\nexport default function FanStatsView() {\n  const { t } = useTranslation();\n  const data = useAsyncFactory(getFanStats, [], \"getFanStats\");\n  const [sorterIndex, setSorterIndex] = useState(0);\n  const sortedData = useMemo((): FanStats | undefined => {\n    if (!data) {\n      return undefined;\n    }\n    if (!SORTERS[sorterIndex]) {\n      return data;\n    }\n    const ret = { ...data };\n    for (const key of Object.keys(ret)) {\n      ret[key] = {\n        ...ret[key],\n        entries: [...ret[key].entries].sort(SORTERS[sorterIndex]),\n      };\n    }\n    return ret;\n  }, [data, sorterIndex]);\n  if (!sortedData) {\n    return <Loading />;\n  }\n  return (\n    <>\n      <div className=\"row\">\n        {Object.entries(sortedData)\n          .map(([modeId, value]) => [parseInt(modeId, 10) as GameMode, value] as [GameMode, typeof value])\n          .sort(([id1], [id2]) => Conf.availableModes.indexOf(id1) - Conf.availableModes.indexOf(id2))\n          .map(([mode, value]) => (\n            <div className=\"col-xl-4\" key={mode}>\n              <h2 className=\"text-center\">{t(modeLabelNonTranslated(mode))}</h2>\n              <p className=\"text-center\">\n                {t(\"记录和出局数：\")}\n                {value.count}\n              </p>\n              <table className=\"table table-striped\">\n                <thead onClick={() => setSorterIndex((sorterIndex + 1) % SORTERS.length)} className=\"cursor-pointer\">\n                  <tr>\n                    <th>{t(\"役\")}</th>\n                    <th className=\"text-right\">{t(\"记录数\")}</th>\n                    <th className=\"text-right\">{t(\"比率\")}</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {value.entries.map((x) => (\n                    <tr key={x.label}>\n                      <td>{t(x.label)}</td>\n                      <td className=\"text-right\">{x.count}</td>\n                      <td className=\"text-right\">\n                        {x.count\n                          ? x.count / value.count < 0.0001\n                            ? \"<0.01%\"\n                            : formatPercent(x.count / value.count)\n                          : \"\"}\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          ))}\n      </div>\n    </>\n  );\n}\n","import React from \"react\";\n\nimport { ModelModeProvider } from \"../modeModel\";\nimport { ViewRoutes, SimpleRoutedSubViews, NavButtons, RouteDef } from \"../routing\";\nimport { ViewSwitch } from \"../routing/index\";\n\nimport RankBySeats from \"./rankBySeats\";\nimport DataByRank from \"./dataByRank\";\nimport FanStats from \"./fanStats\";\nimport Conf from \"../../utils/conf\";\n\nconst ROUTES = (\n  <ViewRoutes>\n    <RouteDef path=\"rank-by-seat\" title=\"坐席顺位\" disabled={!Conf.features.statisticsSubPages.rankBySeat}>\n      <RankBySeats />\n    </RouteDef>\n    <RouteDef path=\"data-by-rank\" title=\"等级数据\" disabled={!Conf.features.statisticsSubPages.dataByRank}>\n      <DataByRank />\n    </RouteDef>\n    <RouteDef path=\"fan-stats\" title=\"和出役种统计\" disabled={!Conf.features.statisticsSubPages.fanStats}>\n      <FanStats />\n    </RouteDef>\n  </ViewRoutes>\n);\n\nexport default function Routes() {\n  return (\n    <SimpleRoutedSubViews>\n      {ROUTES}\n      <ModelModeProvider>\n        <NavButtons />\n        <ViewSwitch />\n      </ModelModeProvider>\n    </SimpleRoutedSubViews>\n  );\n}\n"],"sourceRoot":""}